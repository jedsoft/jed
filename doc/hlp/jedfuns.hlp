abbrev_table_p

 SYNOPSIS
  Test whether an abbreviation table "name" exists

 USAGE
  Integer abbrev_table_p (String name)

 DESCRIPTION
  Returns non-zero if an abbreviation table with called `name' exists. If
  the table does not exist, it returns zero.

--------------------------------------------------------------

create_abbrev_table

 SYNOPSIS
  Create an abbreviation table "name"

 USAGE
  Void create_abbrev_table (String name, String word)

 DESCRIPTION
  Create an abbreviation table with name `name'.  The second parameter
  `word' is the list of characters used to represent a word for the
  table. If the empty string is passed for `word', the characters that
  currently constitute a word are used.

--------------------------------------------------------------

define_abbrev

 SYNOPSIS
  Define an abbreviation

 USAGE
  Void define_abbrev (String tbl, String abbrv, String expans)

 DESCRIPTION
  This function is used to define an abbreviation `abbrv' that will be
  expanded to `expans'.  The definition will be placed in the table with
  name `tbl'.

--------------------------------------------------------------

delete_abbrev_table

 SYNOPSIS
  Delete the abbrev table "name"

 USAGE
  Void delete_abbrev_table (String name)

 DESCRIPTION
  Delete the abbrev table specified by `name'.

--------------------------------------------------------------

dump_abbrev_table

 SYNOPSIS
  Insert the abbreviation table "name"

 USAGE
  Void dump_abbrev_table (String name)

 DESCRIPTION
  This function inserts the contents of the abbreviation table called
  `name' into the current buffer.

--------------------------------------------------------------

list_abbrev_tables

 SYNOPSIS
  Return the names of all defined abbreviation tables

 USAGE
  Integer list_abbrev_tables ()

 DESCRIPTION
  This function returns the names of all currently defined
  abbreviation tables.  The top item on the stack will be the number of
  tables followed by the names of the tables.

--------------------------------------------------------------

use_abbrev_table

 SYNOPSIS
  Use the abbreviation table "table" for the current buffer

 USAGE
  Void use_abbrev_table (String table)

 DESCRIPTION
  Use the abbreviation table named `table' as the abbreviation table for
  the current buffer.  By default, the "Global" table is used.

--------------------------------------------------------------

what_abbrev_table

 SYNOPSIS
  Return info about the current abbreviation table

 USAGE
  (String, String) what_abbrev_table ()

 DESCRIPTION
  This functions returns both the name of the abbreviation table and the
  definition of the word for the table currently associated with the
  current buffer.  If none is defined it returns two empty strings.

--------------------------------------------------------------

blocal_var_exists

 SYNOPSIS
  Determine whether a buffer-local variable exists

 USAGE
  Int_Type blocal_var_exists (String_Type name)

 DESCRIPTION
  The `blocal_var_exists' function returns non-zero if the
  specified buffer-local variable exists.  It returns zero of the
  variable does not exists.

 SEE ALSO
  get_blocal_var, create_blocal_var, set_blocal_var, define_blocal_var

--------------------------------------------------------------

create_blocal_var

 SYNOPSIS
  Create a buffer local variable "name"

 USAGE
  Void create_blocal_var (String name)

 DESCRIPTION
  This function is used to create a buffer local variable named
  `name'. A buffer local variable is a variable whose value is
  local to the current buffer.

 SEE ALSO
  get_blocal_var, set_blocal_var, define_blocal_var

--------------------------------------------------------------

set_blocal_var

 SYNOPSIS
  Set the buffer local variable "v" to value "val"

 USAGE
  Void set_blocal_var (val, String v)

 DESCRIPTION
  This function sets the value of the buffer local variable with name `v'
  to value `val'.  The buffer local variable specified by `v' must have
  been previously created by the `create_blocal_var' function.  `val' must
  have the type that was declared when `create_blocal_var' was called.

 SEE ALSO
  get_blocal_var, create_blocal_var

--------------------------------------------------------------

ADD_NEWLINE

 SYNOPSIS
  Add a newline to a buffer when saving

 USAGE
  Int_Type ADD_NEWLINE

 DESCRIPTION
  If the value of `ADD_NEWLINE' is non-zero and the
  buffer does not end with a newline character, a newline character
  will be silently added to the end of a buffer when the buffer is
  written out to a file.

--------------------------------------------------------------

MAX_HITS

 SYNOPSIS
  Set the Autosave Interval

 USAGE
  Int_Type MAX_HITS

 DESCRIPTION
  The value of the `MAX_HITS' variable specifies how many ``hits''
  a buffer can take before it is autosaved.   A hit is defined as a
  single key sequence that could modify the buffer.

 SEE ALSO

--------------------------------------------------------------

autosave

 SYNOPSIS
  Save the current buffer to an autosave file

 USAGE
  Void autosave ()

 DESCRIPTION
  The `autosave' function saves the current buffer in an auto save file
  if the buffer has been marked for the auto save operation.

 SEE ALSO
  setbuf_info, autosaveall

 SEE ALSO
  MAX_HITS

--------------------------------------------------------------

autosaveall

 SYNOPSIS
  Save all buffers to autosave files

 USAGE
  Void autosaveall ()

 DESCRIPTION
  This function is like `autosave' except that it causes all files
  marked for the auto save operation to be auto-saved.

 SEE ALSO
  autosave, setbuf_info

 SEE ALSO
  MAX_HITS

--------------------------------------------------------------

buffer_list

 SYNOPSIS
  Return the names of buffers

 USAGE
  Integer buffer_list ()

 DESCRIPTION
  This function returns an integer indicating the number of buffers and
  leaves the names of the buffers on the stack.  For example, the
  following function displays the names of all buffers attached to
  files:

        define show_buffers ()
        {
           variable b, str = "", file;
           loop (buffer_list ())
             {
                 b = ();
                 (file,,,) = getbuf_info (b);
                 if (strlen (file)) str = strcat (str, strcat (" ", b));
             }
           message (str);
        }


 SEE ALSO
  getbuf_info, whatbuf

--------------------------------------------------------------

buffer_visible

 SYNOPSIS
  Return the number of windows containing a specified buffer

 USAGE
  Integer buffer_visible (String buf)

 DESCRIPTION
  This function is used to determine whether or not a buffer with name
  specified by the string `buf' is in a window or not.  More explicitly,
  it returns the number of windows containing `buf'.  This means that if
  `buf' does not occupy a window, it returns zero.  For Example,

        define find_buffer_in_window (buf)
        {
           ifnot (buffer_visible (buf)) return 0;
           pop2buf (buf);
           return 1;
        }

  is a function that moves to the window containing `buf' if `buf' is in
  a window.

 SEE ALSO
  bufferp, nwindows

--------------------------------------------------------------

bufferp

 SYNOPSIS
  Test if a buffer exists or not

 USAGE
  Integer bufferp (String buf)

 DESCRIPTION
  This function is used to see if a buffer exists or not.  If a buffer with
  name `buf' exists, it returns a non-zero value.  If it does not exist,
  it returns zero.

 SEE ALSO
  setbuf, getbuf_info

--------------------------------------------------------------

bury_buffer

 SYNOPSIS
  Make it unlikely for a specified buffer to appear in a window

 USAGE
  Void bury_buffer (String name)

 DESCRIPTION
  The `bury_buffer' function may be used to make it unlikely for the
  buffer specified by the parameter `name' to appear in a window.

 SEE ALSO
  sw2buf, getbuf_info

--------------------------------------------------------------

check_buffers

 SYNOPSIS
  Check if any buffers have been changed on disk

 USAGE
  check_buffers ()

 DESCRIPTION
  The `check_buffers' function checks to see whether or not any of
  the disk files that are associated with the editor's buffers have been
  modified since the association was made.  The buffer flags are
  updated accordingly.

 SEE ALSO
  file_time_compare, file_changed_on_disk

--------------------------------------------------------------

delbuf

 SYNOPSIS
  Delete a named buffer

 USAGE
  Void delbuf (String buf)

 DESCRIPTION
  `delbuf' may be used to delete a buffer with the name specified by
  `buf'.  If the buffer does not exist, a S-Lang error will be generated.

 SEE ALSO
  whatbuf, bufferp, sw2buf

--------------------------------------------------------------

getbuf_info

 SYNOPSIS
  Get basic information about a buffer

 USAGE
  (file, dir, name, flags) = getbuf_info ([ buf ])

   String_Type buf;  % optional argument -- name of buffer
   Int_Type flags;   % buffer flags
   String_Type name; % name of buffer
   String_Type dir;  % directory associated with buffer
   String_Type file; % name of file associated with buffer (if any).


 DESCRIPTION
  This function may be used to get some basic information about a
  specified buffer.  If the optional argument `buf' is not
  present, the current buffer will be used, otherwise `buf' must
  be the name of an existing buffer.

  The integer that corresponds to the buffer flags are encoded as:

        bit 0: (0x001) buffer modified
        bit 1: (0x002) auto save mode
        bit 2: (0x004) file on disk modified
        bit 3: (0x008) read only bit
        bit 4: (0x010) overwrite mode
        bit 5: (0x020) undo enabled
        bit 6: (0x040) buffer buried
        bit 7: (0x080) Force save upon exit.
        bit 8: (0x100) Do not backup
        bit 9: (0x200) File associated with buffer is a binary file
        bit 10: (0x400) Add CR to end of lines when writing buffer to disk.
        bit 11: (0x800) Abbrev mode
        bit 17: (0x20000) Visual wrapping

  For example,

        (file,,,flags) = getbuf_info();

  returns the file and the flags associated with the current buffer.

 SEE ALSO
  setbuf_info, whatbuf

--------------------------------------------------------------

pop2buf

 SYNOPSIS
  Open a specified buffer in a second window

 USAGE
  Void pop2buf (String buf)

 DESCRIPTION
  The `pop2buf' function will switch to another window and display the
  buffer specified by `buf' in it.  If `buf' does not exist, it will be
  created. If `buf' already exists in a window, the window containing
  `buf' will become the active one.  This function will create a new
  window if necessary.  All that is guaranteed is that the current
  window will continue to display the same buffer before and after the
  call to `pop2buf'.

 SEE ALSO
  whatbuf, pop2buf_whatbuf, setbuf, sw2buf, nwindows

--------------------------------------------------------------

pop2buf_whatbuf

 SYNOPSIS
  pop2buf and return the old buffers name

 USAGE
  String pop2buf_whatbuf (String buf)

 DESCRIPTION
  This function performs the same function as `pop2buf' except that the
  name of the buffer that `buf' replaced in the window is returned.
  This allows one to restore the buffer in window to what it was before
  the call to `pop2buf_whatbuf'.

 SEE ALSO
  pop2buf, whatbuf

--------------------------------------------------------------

set_buffer_umask

 SYNOPSIS
  Set the process file creation mask for the current buffer

 USAGE
  Integer set_buffer_umask (Integer cmask)

 DESCRIPTION
  The function may be used to set the process file creation mask
  for the appropriate operations associated with the current
  buffer.  This makes it possible to have a buffer-dependent
  umask setting. The function takes the desired umask setting and
  returns the previous setting.  If `cmask' is zero, the default
  process umask setting will be used for operations while the buffer
  is current.  If `cmask' is -1, the umask associated with the buffer
  will not be changed.

--------------------------------------------------------------

set_mode

 SYNOPSIS
  Set mode flags and name

 USAGE
   Void set_mode(String mode, Integer flags)

 DESCRIPTION
  This function sets buffer mode flags and status line mode name.  `mode'
  is a string which is displayed on the status line if the `%m' status
  line format specifier is used. The second argument, `flags' is an
  integer with the possible values:

        0 : no mode. Very generic
        1 : Wrap mode.  Lines are automatically wrapped at wrap column.
        2 : C mode.
        4 : Language mode.  Mode does not wrap but is useful for computer
            languages.
        8 : S-Lang mode
        16: Fortran mode highlighting
        32: TeX mode highlighting


 SEE ALSO
  what_mode, getbuf_info, setbuf_info

--------------------------------------------------------------

setbuf

 SYNOPSIS
  Temporary change the default buffer to another

 USAGE
  Void setbuf(String buf)

 DESCRIPTION
  Changes the default buffer to one named `buf'. If the buffer does not
  exist, it will be created.
  Note: This change only lasts until top
  level of editor loop is reached at which point the the buffer
  associated with current window will be made the default.  That is this
  change should only be considered as temporary.  To make a long lasting
  change, use the function `sw2buf'.

 SEE ALSO
  sw2buf, pop2buf, whatbuf, pop2buf_whatbuf

--------------------------------------------------------------

setbuf_info

 SYNOPSIS
  Change attributes for a buffer

 USAGE
  setbuf_info([ buf, ] file, dir, name, flags)

   String_Type buf;  % optional argument -- name of buffer
   Int_Type flags;   % buffer flags
   String_Type name; % name of buffer
   String_Type dir;  % directory associated with buffer
   String_Type file; % name of file associated with buffer (if any).


 DESCRIPTION
  This function may be used to change attributes regarding the buffer
  `buf'.  If the optional argument `buf' is not present, the
  current buffer will be used.

  `setbuf_info' performs the opposite function of the related
  function `getbuf_info'.  Here `file' is the name of the file
  to be associated with the buffer; `dir' is the directory to be
  associated with the buffer; `name' is the name to be assigned to
  the buffer, and `flags' describe the buffer attributes.  See
  `getbuf_info' for a discussion of `flags'.  Note that the
  actual file associated with the buffer is located in directory
  `dir' with the name `file'. For example, the function

        define set_overwrite_mode ()
        {
           variable dir, file, flags, name;
           (file, dir, name, flags) = getbuf_info ();
           flags = flags | (1 shl 4);
           setbuf_info (file, dir, name, flags);
        }

  may be used to turn on overwrite mode for the current buffer.

  Advanced S-Lang programmers exploit the fact that S-Lang is a stack
  based language and simply write the above function as:

        define set_overwrite_mode ()
        {
           setbuf_info (getbuf_info () | 0x10);
        }

  Here, `(1 shl 4)' has been written as the hexidecimal number
  `0x10'.

 SEE ALSO
  getbuf_info, setbuf, whatbuf

--------------------------------------------------------------

sw2buf

 SYNOPSIS
  Switch to a buffer (more permanent than setbuf)

 USAGE
  Void sw2buf (String buf)

 DESCRIPTION
  This function is used to switch to another buffer whose name is
  specified by the parameter `buf'.  If the buffer specified by `buf'
  does not exist, one will be created.
  Note: Unlike `setbuf', the change
  to the new buffer is more permanent in the sense that when control
  passed back out of S-Lang to the main editor loop, if the current
  buffer at that time is the buffer specified here, this buffer will be
  attached to the window.

 SEE ALSO
  setbuf, pop2buf, bufferp

--------------------------------------------------------------

what_mode

 SYNOPSIS
  Get mode flags and name of the current buffer

 USAGE
  (String name, Integer flags) = Integer what_mode ()

 DESCRIPTION
  This function may be used to obtain the mode flags and mode name of the
  current buffer.  See `set_mode' for more details.

 SEE ALSO
  set_mode, getbuf_info, setbuf_info

--------------------------------------------------------------

whatbuf

 SYNOPSIS
  Return the name of the current buffer

 USAGE
  String whatbuf()

 DESCRIPTION
  `whatbuf' returns the name of the current buffer.  It is usually used
  in functions when one wants to work with more than one buffer.  The
  function `setbuf_info' may be used to change the name of the buffer.

 SEE ALSO
  getbuf_info, bufferp

--------------------------------------------------------------

write_buffer

 SYNOPSIS
  Write the current buffer to a file

 USAGE
  Integer write_buffer (String filename)

 DESCRIPTION
  This function may be used to write the current buffer out to a file
  specified by `filename'.  The buffer will then become associated with
  that file.  The number of lines written to the file is returned.  An
  error condition will be signaled upon error.

 SEE ALSO
  write_region_to_file, setbuf_info

--------------------------------------------------------------

add_color_object

 SYNOPSIS
  Return the object number associated with "obj"

 USAGE
  add_color_object (String_Type name)

 DESCRIPTION
  This function creates a new color object with a specified name.  See
  the `set_color' documentation for pre-defined color objects.

 SEE ALSO
  set_color, get_color, color_number

--------------------------------------------------------------

color_number

 SYNOPSIS
  Return the object number associated with "obj"

 USAGE
  Integer color_number (String obj)

 DESCRIPTION
  This function returns the object number associated with the
  string `obj'.  Valid names for `obj' are as per `set_color'.

 SEE ALSO
  set_color, set_column_colors

 SEE ALSO
  WANT_SYNTAX_HIGHLIGHT, USE_ANSI_COLORS

--------------------------------------------------------------

get_color

 SYNOPSIS
  Return the foreground and background color of an object

 USAGE
  (String_Type fg, String_Type bg) =  get_color (String_Type name)

 DESCRIPTION
  This function returns the foreground and background colors of the
  specified color object.

 SEE ALSO
  set_color, color_number, add_color_object

--------------------------------------------------------------

set_color

 SYNOPSIS
  Set fore- and background colors of an object

 USAGE
  set_color (String_Type obj, String_Type fg, String_Type bg)

 DESCRIPTION
 This function sets the foreground and background colors of an object
 specified by the string `obj' to `fg' and `bg'.  The exact values of
 the strings `fg' and `bg' are system dependent.  For the X-Window
 system, they can be any string that the server understands, e.g.,
 `"SteelBlue"'.  For other systems, the color must be one of the
 following:

   "black"            "gray"
   "red"              "brightred"
   "green"            "brightgreen"
   "brown"            "yellow"
   "blue"             "brightblue"
   "magenta"          "brightmagenta"
   "cyan"             "brightcyan"
   "lightgray"        "white"
   "default"

 On most terminals, the values in the second column have no effect
 when used as the background color.

 Using "default" as a foreground or background color instructs the
 editor to tell the terminal to use the default foreground and
 background colors of the window.  If you use a terminal that uses a
 transparent background, then you need to specify "default" as the
 background color.  Not all terminals support the notion of the
 "default" color.

 The valid names for `obj' are:

   "normal"      Default foreground/background
   "status"      The status window line
   "region"      Highlighted Regions
   "cursor"      Text Cursor (X-Windows)
   "cursorovr"   Text Cursor in overwrite mode (X-Windows)
   "menu"        The menu bar
   "error"       Error messages
   "message"     Other messages
   "dollar"      Color of the indicator that text extends beyond the
                 boundary of the window.
   "linenum"     Line number field

 If color syntax highlighting is enabled, the following object names
 are also meaningful:

   "number"      Numbers in C-mode and Equations in TeX-mode
   "delimiter"   Commas, semi-colons, etc...
   "keyword"     Language dependent
   "keyword1"    Language dependent
   "keyword2"    Language dependent
   "keyword3"    Language dependent
   "keyword4"    Language dependent
   "keyword5"    Language dependent
   "keyword6"    Language dependent
   "keyword7"    Language dependent
   "keyword8"    Language dependent
   "keyword9"    Language dependent
   "string"      Literal strings
   "comment"     Comments
   "operator"    Such as +, -, etc...
   "preprocess"  Preprocessor lines
   "tab"
   "trailing_whitespace"
   "html"        <html> and '<' syntax objects.

 If line attributes are available, then you may also specify the color
 of the hidden line indicator:

   "..."         Hidden line indicator

 The color of the menu objects may be specified via

   "menu_char"              Menu item key-shortcut color
   "menu_shadow"            Color of the shadow
   "menu_selection"         Selected menu-item color
   "menu_popup"             Color of the popup box
   "menu_selection_char"    Selected menu item key-shortcut color

 Xjed defines the following objects:

   "mouse"                  Mouse cursor color
   "border"                 Window border color


 SEE ALSO
  define_syntax, set_color_esc, set_column_colors, set_color_object

 SEE ALSO
  WANT_SYNTAX_HIGHLIGHT, USE_ANSI_COLORS

--------------------------------------------------------------

set_color_esc

 SYNOPSIS
  associate an escape sequence with an object

 USAGE
  Void set_color_esc (String object, String esc_seq)

 DESCRIPTION
  This function may be used to associate an escape sequence with an
  object.  The escape sequence will be sent to the terminal prior to
  sending updating the object.  It may be used on mono terminals to
  underline objects, etc...  The object names are the same names used by
  the `set_color' function.
  Note: Care should be exercised when using
  this function.  Also, one may need to experiment around a little to
  get escape sequences that work together.

 SEE ALSO
  set_color

--------------------------------------------------------------

set_color_object

 SYNOPSIS
  Associate colors "fg" and "bg" with object "obj"

 USAGE
  Void set_color_object (Integer obj, String fg, String bg)

 DESCRIPTION
  Associate colors `fg' and `bg' with object `obj'.  Valid values for `obj'
  are in the range 30 to 128.  All other values are reserved.  Values for
  the strings `fg' and `bg' are as given by the description for `set_color'.

 SEE ALSO
  set_column_colors, set_color

--------------------------------------------------------------

set_column_colors

 SYNOPSIS
  Associate a color with columns `c0' through `c1'

 USAGE
  Void set_column_colors (Integer color, Integer c0, Integer c1)

 DESCRIPTION
  This function associates a color with columns `c0' through `c1' in the
  current buffer.  That is, if there is no syntax highlighting already
  defined for the current buffer, when the current buffer is displayed,
  columns `c0' through `c1' will be displayed with the attributes of the
  `color' object.  The parameters `c0' and `c1' are restricted to the range
  1 through `SCREEN_WIDTH'.  Use the function `set_color_object' to assign
  attributes to the `color' object.

 SEE ALSO
  set_color_object

--------------------------------------------------------------

_autoload

 SYNOPSIS
  Specify multiple functions to autoload

 USAGE
  Void _autoload (String fun, String fn, ..., Integer n)

 DESCRIPTION
  The `_autoload' function is like the `autoload' function except that
  it takes `n' pairs of function name (`fun') / filename (`fn') pairs.
  For example,

        _autoload ("fun_a", "file_a", "fun_b", "file_b", 2);

  is equivalent to

        autoload ("fun_a", "file_a");
        autoload ("fun_b", "file_b");


 SEE ALSO
  autoload

--------------------------------------------------------------

evalbuffer

 SYNOPSIS
  Eval the current buffer as S-Lang script

 USAGE
  Void evalbuffer ([String_Type namespace])

 DESCRIPTION
 This function causes the current buffer to be sent to the S-Lang
 interpreter for evaluation.  If the optional namespace argument is
 given, the buffer will be evaluated in the specified namespace.  If an
 error is encountered while parsing the buffer, the cursor will be
 placed at the location of the error.

 SEE ALSO
  evalfile, require

--------------------------------------------------------------

get_jed_library_path

 SYNOPSIS
  Return the current search path for jed library files

 USAGE
  String get_jed_library_path ()

 DESCRIPTION
  This function returns the current search path for jed library files.
  The path may be set using the function `set_jed_library_path'.

 SEE ALSO
  set_jed_library_path

--------------------------------------------------------------

set_jed_library_path

 SYNOPSIS
  Set the search path for library files

 USAGE
  Void set_jed_library_path (String p)

 DESCRIPTION
  This function may be used to set the search path for library files.
  Its parameter `p' may be a comma separated list of directories to
  search.  When the editor is first started, the path is initialized
  from the `JED_ROOT', or `JED_LIBRARY' environment variables.

 SEE ALSO
  get_jed_library_path

--------------------------------------------------------------

BACKUP_BY_COPYING

 SYNOPSIS
  Set the backup mode

 USAGE
  Int_Type BACKUP_BY_COPYING

 DESCRIPTION
 If non-zero, backup files will be made by copying the original file
 to the backup file.  If zero, the backup file will be created by
 renaming the original file to the backup file.  The default for
 `BACKUP_BY_COPYING' is zero because it is fastest.

 SEE ALSO
  rename_file, copy_file

--------------------------------------------------------------

IsHPFSFileSystem

 SYNOPSIS
  Test if drive of "path" is HPFS

 USAGE
  Int_Type IsHPFSFileSystem(String_Type path)

 DESCRIPTION
  Returns non-zero if drive of `path' (possibly the default drive) is
  HPFS.

--------------------------------------------------------------

change_default_dir

 SYNOPSIS
  Change the current working directory

 USAGE
  Int_Type change_default_dir (String_Type new_dir)

 DESCRIPTION
  This function may be used to change the current working directory
  of the editor to `new_dir'.  It returns zero upon success or `-1' upon
  failure.
  Note: Each buffer has its own working directory.  This function does not
  change the working directory of the buffer.  Rather, it changes the
  working directory of the whole editor.  This has an effect on functions
  such as `rename_file' when such functions are passed relative filenames.

 SEE ALSO
  setbuf_info, getbuf_info, rename_file

--------------------------------------------------------------

copy_file

 SYNOPSIS
  Copy a file "src" to "dest"

 USAGE
  Int_Type copy_file (String_Type src, String_Type dest)

 DESCRIPTION
  This function may be used to copy a file named `src' to a new file
  named `dest'.  It attempts to preserve the file access and modification
  times as well as the ownership and protection.

  It returns `0' upon success and `-1' upon failure.

 SEE ALSO
  rename_file, file_status

--------------------------------------------------------------

delete_file

 SYNOPSIS
  Delete the file "file"

 USAGE
  Int_Type delete_file (String_Type file)

 DESCRIPTION
  This function may be used to delete a file specified by the `file'
  parameter.  It returns non-zero if the file was successfully deleted
  or zero otherwise.

 SEE ALSO
  rmdir

--------------------------------------------------------------

directory

 SYNOPSIS
  Return number of files and list of files matching filename

 DESCRIPTION
   returns the number of files and a list of files which match filename.
      On unix, this defaults to filename*.  It is primarily useful for
      DOS and VMS to expand wildcard filenames

--------------------------------------------------------------

expand_filename

 SYNOPSIS
  Expand a file name to a canonical form

 USAGE
  String_Type expand_filename (String_Type file)

 DESCRIPTION
  The `expand_filename' function expands a file to a canonical form.
  For example, under Unix, if `file' has the value `"/a/b/../c/d"', it
  returns `"/a/c/d"'.  Similarly, if `file' has the value
  `"/a/b/c//d/e"', `"/d/e"' is returned.

 SEE ALSO
  expand_symlink, path_concat

--------------------------------------------------------------

expand_symlink

 SYNOPSIS
  Expand a symbolic link

 USAGE
  String_Type expand_symlink (String_Type pathname)

 DESCRIPTION
  The `expand_symlink' is like the `expand_filename' function
  except that it also expands components of the pathname that are
  symbolic links.

 SEE ALSO
  expand_filename, path_concat, readlink

--------------------------------------------------------------

extract_filename

 SYNOPSIS
  Separate the file name from "filespec"

 USAGE
  String_Type extract_filename (String_Type filespec)

 DESCRIPTION
  This function may be used to separate the file name from the path of
  of a file specified by `filespec'.  For example, under Unix, the
  expression

        extract_filename ("/tmp/name");

  returns the string `"name"'.

 SEE ALSO
  expand_filename

--------------------------------------------------------------

file_changed_on_disk

 SYNOPSIS
  Test if file "fn" is more recent than the current buffer

 USAGE
  Int_Type file_changed_on_disk (String_Type fn)

 DESCRIPTION
  This function may be used to determine if the disk file specified by the
  parameter `fn' is more recent than the current buffer.

 SEE ALSO
  file_time_compare, check_buffers

--------------------------------------------------------------

file_status

 SYNOPSIS
  Return information about file "filename"

 USAGE
  Int_Type file_status (String_Type filename)

 DESCRIPTION
  The `file_status' function returns information about a file specified
  by the name `filename'.  It returns an integer describing the file
  type:
   2     file is a directory
   1     file exists and is not a directory
   0     file does not exist.
  -1     no access.
  -2     path invalid
  -3     unknown error

--------------------------------------------------------------

file_time_compare

 SYNOPSIS
  Compares the modification times of two files

 USAGE
  Int_Type file_time_cmp (String_Type file1, String_Type file2)

 DESCRIPTION
  This function compares the modification times of two files,
  `file1' and `file2'. It returns an integer that is either
  positive, negative, or zero integer for `file1 > file2',
  `file1 < file2', or `file1 == file2', respectively.  In
  this context, the comparison operators are comparing file
  modification times.  That is, the operator `>' should be read
  ``is more recent than''.  The convention adopted by this routine is
  that if a file does not exist, its modification time is taken to be
  at the beginning of time.  Thus, if `f' exists, but `g' does
  not, the `file_time_compare (f, g)' will return a positive
  number.

 SEE ALSO
  file_status, time

--------------------------------------------------------------

find_file

 SYNOPSIS
  Open the file "name" in a buffer (or just goto buffer)

 USAGE
  Int_Type find_file (String_Type name)

 DESCRIPTION
  The `find_file' function switches to the buffer associated with the
  file specified by `name'.  If no such buffer exists, one is created
  and the file specified by `name' is read from the disk and associated
  with the new buffer.  The buffer will also become attached to the
  current window.  Use the `read_file' function to find a file but not
  associate it with the current window.

 SEE ALSO
  read_file

--------------------------------------------------------------

insert_file

 SYNOPSIS
  Insert a file "f" into the current buffer

 USAGE
  Int_Type insert_file (String_Type f)

 DESCRIPTION
  This function may be used to insert the contents of a file named `f'
  into the buffer at the current position.  The current editing point
  will be placed at the end of the inserted text.  The function returns
  `-1' if the file was unable to be opened; otherwise it returns the
  number of lines inserted.  This number can be zero if the file is empty.

 SEE ALSO
  read_file, find_file, insert

--------------------------------------------------------------

msdos_fixup_dirspec

 SYNOPSIS
  remove trailing backslash from "dir"

 USAGE
  String_Type msdos_fixup_dirspec (String_Type dir)

 DESCRIPTION
  The motivation behind this is that DOS does not like a trailing
  backslash except if it is for the root dir.  This function makes
  `dir' conform to that.

--------------------------------------------------------------

read_file

 SYNOPSIS
  Read file "fn" but don't open in a window

 USAGE
  Int_Type read_file (string fn)

 DESCRIPTION
  The `read_file' function may be used to read a file specified by `fn'
  into its own buffer.  It returns a non-zero value upon success and
  signals an error upon failure.  The hook `find_file_hook' is called
  after the file is read in.  Unlike the related function, `find_file',
  this function does not create a window for the newly created buffer.

 SEE ALSO
  find_file, file_status, write_buffer

--------------------------------------------------------------

rename_file

 SYNOPSIS
  Change the name of a file

 USAGE
  Int_Type rename_file (String_Type old_name, String_Type new_name)

 DESCRIPTION
  This function may be used to change the name of a disk file from
  `old_name' to `new_name'.  Upon success, zero is returned.  Any other
  value indicates failure.
  Note: Both filenames must refer to the same file system.

 SEE ALSO
  file_status, stat_file

--------------------------------------------------------------

set_file_translation

 SYNOPSIS
  Set the way the next file is opened: 1 binary, 0 text mode

 USAGE
  set_file_translation (Int_Type n)

 DESCRIPTION
  This function affects only the way the next file is opened.  Its
  affect does not last beyond that.  If it the value of the parameter
  is 1, the next file will be opened in binary mode.  If the parameter is
  zero, the file will be opened in text mode.

--------------------------------------------------------------

is_line_hidden

 SYNOPSIS
  Test if the current line is hidden

 USAGE
  Integer is_line_hidden ()

 DESCRIPTION
  This function returns a non-zero value if the current line is hidden.  It
  will return zero if the current line is visible.

 SEE ALSO
  set_line_hidden

--------------------------------------------------------------

set_line_hidden

 SYNOPSIS
  Set the hidden attribute: 1 hidden, 0 visible

 USAGE
  Void set_line_hidden (Integer flag)

 DESCRIPTION
  If the parameter `flag' is non-zero, the current line will be given
  the hidden attribute.  This means that it will not be displayed.  If the
  parameter is zero, the hidden attribute will be turned off.

 SEE ALSO
  set_region_hidden, is_line_hidden

--------------------------------------------------------------

set_region_hidden

 SYNOPSIS
  Set the hidden attribute for all lines in a region

 USAGE
  Void set_region_hidden (Integer flag)

 DESCRIPTION
  This function may be used to hide the lines in a region.  If `flag' is
  non-zero, all lines in the region will be hidden.  If it is zero, the
  lines in the region will be made visible.

 SEE ALSO
  set_line_hidden, is_line_hidden, skip_hidden_lines_forward

--------------------------------------------------------------

skip_hidden_lines_backward

 SYNOPSIS
  Move backward across either hidden or non-hidden lines

 USAGE
  Void skip_hidden_lines_backward (Integer type)

 DESCRIPTION
  This function may be used to move backward across either hidden or non-hidden
  lines depending upon whether the parameter `type' is non-zero or zero.
  If `type' is non-zero, the Point is moved backward across hidden lines
  until a visible line is reached.  If `type' is zero, visible lines will
  be skipped instead.  If the top of the buffer is reached before the
  appropriate line is reached, the Point will be left there.

  Note: The functions `up' and `down' are insensitive to whether or not
  a line is hidden.

 SEE ALSO
  skip_hidden_lines_forward, is_line_hidden

--------------------------------------------------------------

skip_hidden_lines_forward

 SYNOPSIS
  Move forward across either hidden or non-hidden lines

 USAGE
  Void skip_hidden_lines_forward (Integer type)

 DESCRIPTION
  This function may be used to move forward across either hidden or non-hidden
  lines depending upon whether the parameter `type' is non-zero or zero.
  If `type' is non-zero, the Point is moved forward across hidden lines
  until a visible line is reached.  If `type' is zero, visible lines will
  be skipped instead.  If the end of the buffer is reached before the
  appropriate line is reached, the Point will be left there.

  Note: The functions `up' and `down' are insensitive to whether or not
  a line is hidden.

 SEE ALSO
  skip_hidden_lines_backward, is_line_hidden

--------------------------------------------------------------

add_to_hook

 SYNOPSIS
  Add a function to a hook (as first one)

 USAGE
  add_to_hook (String_Type hook_name, Ref_Type funct)

 DESCRIPTION
  `add_to_hook' adds the function `funct' to the beginning of the
  list of hooks associated with `hook_name'.  The currently
  supported hooks include:

    _jed_append_region_hooks
    _jed_exit_hooks
    _jed_find_file_after_hooks
    _jed_find_file_before_hooks
    _jed_init_display_hooks
    _jed_insert_file_hooks
    _jed_quit_hooks
    _jed_read_file_hooks
    _jed_reset_display_hooks
    _jed_resize_display_hooks
    _jed_resume_hooks
    _jed_save_buffer_after_hooks
    _jed_save_buffer_before_hooks
    _jed_set_mode_hooks
    _jed_switch_active_buffer_hooks
    _jed_suspend_hooks
    _jed_write_region_hooks

 See the file `hooks.txt' in the main jed distribution for more
 information.

 SEE ALSO
  append_to_hook, remove_from_hook

--------------------------------------------------------------

append_to_hook

 SYNOPSIS
  Append a function to a hook

 USAGE
  append_to_hook (String_Type hook_name, Ref_Type funct)

 DESCRIPTION
  `append_to_hook' adds the function `funct' to the end of the
  list of hooks associated with `hook_name'.  See
  `add_to_hook' for more information.

 SEE ALSO
  add_to_hook, remove_from_hook

--------------------------------------------------------------

remove_from_hook

 SYNOPSIS
  Remove a function from a list of hooks

 USAGE
  remove_from_hook (String_Type hook_name, Ref_Type funct)

 DESCRIPTION
  `remove_from_hook' removes the function `funct' from the
  list of hooks associated with `hook_name'.

 SEE ALSO
  add_to_hook, append_to_hook

--------------------------------------------------------------

_jed_run_hooks

 SYNOPSIS
  Execute the functions in a hook chain

 USAGE
  _jed_run_hooks (String_Type hook_name, Integer_Type mode [,Array_Type args])

 DESCRIPTION
 `_jed_run_hooks' executes the functions registered for `hook_name'.
 The argument `mode' defines which functions are called:

  JED_HOOKS_RUN_ALL
     all functions; no function should return a value.
  JED_HOOKS_RUN_UNTIL_0
     Run until a function returns the value 0; every function must return
     an integer value.
  JED_HOOKS_RUN_UNTIL_NON_0
     Run until a function returns a non-zero
      value; every function must return an integer value.

 If the third argument is given, then it must be an array of strings
 to be passed as arguments to the the hook-functions.

 SEE ALSO
  append_to_hook, add_to_hook

--------------------------------------------------------------

get_buffer_hook

 SYNOPSIS
  Get the value of a specified buffer hook

 USAGE
  Ref_Type get_buffer_hook (String_Type hook_name)

 DESCRIPTION
  The `get_buffer_hook' function returns the value of the
  specified hook name as a function reference.  If no hook was defined
  or the hook does not exist, then NULL will be returned.  See the
  documentation for `set_buffer_hook' for a list of hook-names.

 EXAMPLE

   % temporarily unset the indent hook
   fun = get_buffer_hook ("indent_hook");
   unset_buffer_hook ("indent_hook");
      .
      .
   % restore the indent hook
   if (fun != NULL)
     set_buffer_hook ("indent_hook", fun);


 SEE ALSO
  set_buffer_hook, unset_buffer_hook

--------------------------------------------------------------

set_buffer_hook

 SYNOPSIS
  Set a specified buffer hook

 USAGE
  set_buffer_hook (String_Type hook_name, Ref_Type func)

 DESCRIPTION
  This function sets the specified hook for the current buffer to the
  function `func'.  The value of `func' may either be a
  string or a function reference (e.g., `&my_hook').  The use of
  a function reference is preferred since that allows hooks to be
  static or private functions.

  Currently supported hooks include:

         "par_sep"  -- returns zero if the current line does not
              constitute the beginning or end of a paragraph.
              It returns non-zero otherwise.  The default value of hook is
              is_paragraph_separator.
         "indent_hook" -- returns nothing.  It is called by the indent line
              routines.
         "wrap_hook"   hook that is called after a line is wrapped.  Returns
              nothing.
         "wrapok_hook"  hook that is called prior to wrapping a line.
              If it returns non-zero, the line will be wrapped,
              otherwise the line will not be wrapped.
         "newline_indent_hook"  --- returns nothing.  If this hook is defined,
              it will be called instead of the internal function
              newline_and_indent is called.
         "bob_eob_error_hook"  --- returns nothing.  If this hook is defined,
              it will be called whenever an error one of the internal cursor
              movement functions would have generated an end of buffer or beginning of
              buffer error.  It is passed an integer that indicates which function
              would have generated the error.  Specifically:

                       -1  previous_line_cmd
                       -2  previous_char_cmd
                       -3  page_up
                        1  next_line_cmd
                        2  next_char_cmd
                        3  page_down
         "mouse_down", "mouse_up", "mouse_drag" "mouse_2click" "mouse_3click"
              These hooks are used to override default hooks defined by the
              mouse_set_default_hook function.
         "mark_paragraph_hook"
              This hook hook is called by the format_paragraph
              function to mark a paragraph.
         "forward_paragraph_hook", "backward_paragraph_hook"
         "format_paragraph_hook"

 See the file jed/doc/hooks.txt for more information and examples.

 SEE ALSO
  unset_buffer_hook, mouse_set_default_hook, get_buffer_hook

--------------------------------------------------------------

unset_buffer_hook

 SYNOPSIS
  Remove a buffer hook

 USAGE
  unset_buffer_hook (String_Type name)

 DESCRIPTION
  The `unset_buffer_hook' function removes a specified buffer hook
  from the current buffer.  If `name' is the empty string, then
  all the buffer hooks of the current buffer will be unset.  See the
  documentation for `set_buffer_hook' for a list of hook-names.

 SEE ALSO
  set_buffer_hook, get_buffer_hook

--------------------------------------------------------------

bobp

 SYNOPSIS
  Test if the current position is at the beginning of the buffer

 USAGE
  Integer bobp ();

 DESCRIPTION
  The `bolp' function is used to determine if the current position is at
  the beginning of the buffer or not.  If so, it returns a non-zero
  value.  However, if it is not, it returns zero.  This simple example,

        define is_buffer_empty ()
        {
          return bobp () and eobp ();
        }

  returns non-zero if the buffer is empty; otherwise, it returns zero.

 SEE ALSO
  bob, eobp, bolp, eolp

--------------------------------------------------------------

bolp

 SYNOPSIS
  Test if the current position is at the beginning of the line

 USAGE
  Integer bolp ();

 DESCRIPTION
  `bolp' is used to test if the current position is at the beginning of
  a line or not.  It returns non-zero if the position is at the
  beginning of a line or zero if not.

 SEE ALSO
  bol, eolp, bobp, eobp

--------------------------------------------------------------

count_chars

 SYNOPSIS
  Return information about size of and position in the buffer

 USAGE
  String count_chars ();

 DESCRIPTION
  This function returns information about the size of the current buffer
  and current position in the buffer.  The string returned is of the form:

        'h'=104/0x68/0150, point 90876 of 127057


 SEE ALSO
  what_char

--------------------------------------------------------------

eobp

 SYNOPSIS
  Test if the current position is at the end of the buffer

 USAGE
  Integer eobp ();

 DESCRIPTION
  The functio `eobp' is used to determine if the current position is at
  the end of the buffer or not.  It returns a non-zero value if at the
  end of the buffer or zero if not.

 SEE ALSO
  eob, bolp, eolp

--------------------------------------------------------------

eolp

 SYNOPSIS
  Test if the current position is at the end of the line

 USAGE
  Integer eolp ();

 DESCRIPTION
  This function may be used to determine whether or not the current
  position is at the end of a line ot not.  If it is, the routine
  returns a non-zero value; otherwise it returns zero.

 SEE ALSO
  eol, bolp, eobp, bobp

--------------------------------------------------------------

get_word_chars

 SYNOPSIS
  Get the currently defined word range

 USAGE
  String_Type get_word_chars ()

 DESCRIPTION
  The `get_word_chars' returns the currently defined set of
  characters that constitute a word.  The set may be returned as a
  character range.

 SEE ALSO
  define_word

--------------------------------------------------------------

what_char

 SYNOPSIS
  Return the ASCII-value of the character at the current position

 USAGE
  ULong_Type what_char ([n])

 DESCRIPTION
  The `what_char' function returns the value of the character at
  the current position as an unsigned long value.  If the optional
  integer argument `n' is negative, then it returns the value of the
  character `-|n|' positions to the left of the current position,
  or, if positive, `n' positions to the right.

  If UTF-8 mode is active and the current character is part
  of an illegal byte sequence, then the function returns a negative
  value equal in magnitude to the value of the byte.

 EXAMPLE

        while (not (eolp ()))
          {
             if (what_char () == '_')
               {
                  del (); insert ("\\_");
                  continue;
               }
             go_right (1);
          }

  has the effect of replacing all underscore characters on the current
  line with a backslash-underscore combination.

 SEE ALSO
  looking_at, blooking_at

--------------------------------------------------------------

what_column

 SYNOPSIS
  Return the current column number

 USAGE
  Integer what_column ();

 DESCRIPTION
  The `what_column' function returns the current column number expanding
  tabs, control characters, etc...  The beginning of the line is at
  column number one.

 SEE ALSO
  whatline, whatpos, goto_column, bolp, eolp

--------------------------------------------------------------

what_line

 SYNOPSIS
  Get the current line number

 USAGE
  Int_Type what_line

 DESCRIPTION
  The value of the `what_line' specifies the current line number.
  Lines are numbered from one.

 NOTES
  This is a read-only variable.

  The actual number is measured from the top of the buffer which is
  itself is affected by whether the buffer is narrowed or not.  For
  example,

   define one ()
   {
     push_mark (); narrow ();
     return what_line;
   }

 always returns 1.

 SEE ALSO
  what_column, goto_line

--------------------------------------------------------------

USE_TABS

 SYNOPSIS
  Control use of tabs in whitespace

 USAGE
  Int_Type USE_TABS

 DESCRIPTION
  `USE_TABS' is a buffer-local variable which defaults to the
  current value of `USE_TABS_DEFAULT'. If `USE_TABS' is
  non-zero, the editor may use tab characters when creating
  whitespace.  If the value of this variable is zero, no tabs will be
  used.

 SEE ALSO
  TAB, TAB_DEFAULT, USE_TABS_DEFAULT

--------------------------------------------------------------

USE_TABS_DEFAULT

 SYNOPSIS
  Control use of tabs in whitespace

 USAGE
  Int_Type USE_TABS_DEFAULT

 DESCRIPTION
  The `USE_TABS_DEFAULT' variable is used to set the default value
  of the buffer-local variable `USE_TABS' for newly created buffers.
  See its documentation for more information.

 SEE ALSO
  TAB, TAB_DEFAULT, USE_TABS

--------------------------------------------------------------

WRAP

 SYNOPSIS
  Set the column at which wrapping occurs

 USAGE
  Int_Type WRAP

 DESCRIPTION
 The `WRAP' variable determines the column number at which
 wrapping will occur.  When entering text, if the current point goes
 beyond this column, the text will automatically wrap to the next
 line.  This will only happen for those buffers for which the wrap flag
 is set.

 SEE ALSO
  WRAP_INDENTS, getbuf_info, set_mode

--------------------------------------------------------------

WRAP_INDENTS

 SYNOPSIS
  Control indentation after wrapping

 USAGE
  Int_Type WRAP_INDENTS

 DESCRIPTION
 If this variable is non-zero, after a line is wrapped, the new line
 will start at the same indentation as the current one.  On the other
 hand, if the value of `WRAP_INDENTS' is zero, the new line will
 begin in the first column.

--------------------------------------------------------------

del

 SYNOPSIS
  Delete the character at the current editing position

 USAGE
  Void del ()

 DESCRIPTION
  The `del' function deletes the character at the current editing
  position.  If the position is at the end of the buffer, nothing happens.
  If the deletion occurs at the end of a line, the next line will be joined
  with the current one.

 SEE ALSO
  eobp, erase_buffer, insert

--------------------------------------------------------------

del_region

 SYNOPSIS
  Delete the region

 USAGE
  Void del_region ()

 DESCRIPTION
  This function deletes the region defined by the mark and the current
  editing point.  For example,

        define delete_this_line ()
        {
          bol (); push_mark (); eol ();
          del_region ();
        }

  defines a function that deletes all characters on the current line
  from the beginning of the line until the end of the line.  It does not
  delete the line itself.

 SEE ALSO
  push_mark, markp, check_region

--------------------------------------------------------------

erase_buffer

 SYNOPSIS
  Erase all text from the current buffer

 USAGE
  erase_buffer ()

 DESCRIPTION
  The `erase_buffer' function erases all text from the current buffer.
  However, it does not delete the buffer itself.

  Note: This function destroys all undo information associated with the
  buffer making it impossible to undo the result of this function.

 SEE ALSO
  delbuf, del

--------------------------------------------------------------

indent_line

 SYNOPSIS
  Indent the current line (using the `indent_hook')

 USAGE
  Void indent_line ()

 DESCRIPTION
  The `indent_line' line function indents the current line in a manner
  which depends upon the current buffer.  The actual function that gets
  called is set via a prior call the `set_buffer_hook' to set the indent
  hook.  The default value is to indent the line to the indentation
  level of the previous line.

 SEE ALSO
  set_buffer_hook

--------------------------------------------------------------

insbuf

 SYNOPSIS
  Insert buffer "buf" into the current buffer

 USAGE
  Void insbuf (String buf)

 DESCRIPTION
  This function may be used to insert the contents of a buffer specified
  by the name `buf' into the current buffer.  The editing position is
  advanced to the end of the insertion.

 SEE ALSO
  copy_region, narrow, narrow_to_region

--------------------------------------------------------------

insert

 SYNOPSIS
  Insert string "str" into buffer at the current position

 USAGE
  Void insert (String str)

 DESCRIPTION
  Inserts string `str' into buffer at the current position.  The editing
  point is moved to the end of the of the string that was inserted.

 SEE ALSO
  insert_char, del, insert_file, insbuf

--------------------------------------------------------------

insert_char

 SYNOPSIS
  Insert a character at the current position

 USAGE
  Void insert_char (ULong_Type ch)

 DESCRIPTION
 This function inserts the specified character into the buffer.

 SEE ALSO
  what_char, insert, insert_byte

--------------------------------------------------------------

insert_byte

 SYNOPSIS
  Insert a byte into the buffer

 USAGE
  Void insert_byte (UChar_Type ch)

 DESCRIPTION
 This function inserts the specified byte into the buffer at the
 current position.

 SEE ALSO
  what_char, insert_char, insert

--------------------------------------------------------------

insert_file_region

 SYNOPSIS
  Insert a region of the file "file"

 USAGE
  Integer insert_file_region (String file, String beg, String end)

 DESCRIPTION
  This function may be used to insert a region specified by the strings
  `beg' and `end' of the file with name `file' into the current buffer.
  The file is scanned line by line until a line that begins with the
  string given by `beg' is encountered.  Then, that line and all
  successive lines up to the one that starts with the string specified
  by `end' is inserted into the buffer.  The line beginning with the
  value of `end' is not inserted although the one beginning with `beg' is.
  The function returns the number of lines inserted or `-1' upon failure
  to open the file.

  Note that a zero length `beg' corresponds to the first line
  and that a zero length `end' corresponds to the last line.

 SEE ALSO
  insert_file

--------------------------------------------------------------

insert_from_kill_array

 SYNOPSIS
  Insert the contents of element "n" of the kill array

 USAGE
  Void insert_from_kill_array (Integer n)

 DESCRIPTION
  This function inserts the contents of the nth element, specified by
  `n', of an internal array of character strings.

  Note: This function is not available on 16 bit systems.

 SEE ALSO
  insert_from_kill_array, copy_region_to_kill_array

 SEE ALSO
  KILL_ARRAY_SIZE

--------------------------------------------------------------

trim

 SYNOPSIS
  Remove all whitespace around the current editing point

 USAGE
  Void trim ()

 DESCRIPTION
  The `trim' function removes all whitespace around the current editing
  point.  In this context, whitespace is considered to be any
  combination of tab and space characters.  In particular, it does not
  include the newline character.  This means that the `trim' function
  will not delete across lines.

 SEE ALSO
  skip_chars, skip_white, del, del_region

--------------------------------------------------------------

whitespace

 SYNOPSIS
  Insert white space of length "n"

 USAGE
  whitespace (Integer n)

 DESCRIPTION
  The `whitespace' function inserts white space of length `n' into the
  current buffer using a combination of spaces and tabs.  The actual
  combination of spaces and tabs used depends upon the buffer local
  variable `TAB'.  In particular, if `TAB' is zero, no tab characters
  will be used for the expansion.

 SEE ALSO
  insert, trim, goto_column

 SEE ALSO
  TAB,TAB_DEFAULT

--------------------------------------------------------------

ALT_CHAR

 SYNOPSIS
  Controls the Alt character prefix

 USAGE
  Int_Type ALT_CHAR

 DESCRIPTION
  If this variable is non-zero, characters pressed in combination the
  `Alt' key will generate a two character sequence: the first
  character is the value of `ALT_CHAR' itself followed by the
  character pressed.  For example, if `Alt-X' is pressed and
  `ALT_CHAR' has a value of 27, the characters `ESC X' will be
  generated.

 NOTES
  This variable may not be available on all platforms.

 SEE ALSO
  META_CHAR, FN_CHAR

--------------------------------------------------------------

CURRENT_KBD_COMMAND

 SYNOPSIS
  The currently executing keyboard command

 USAGE
  String_Type CURRENT_KBD_COMMAND

 DESCRIPTION
  The value of the `CURRENT_KBD_COMMAND' function represents the
  name of the currently executing procedure bound to the currently
  executing key sequence.

 SEE ALSO
  LASTKEY, LAST_KBD_COMMAND, _function_name

--------------------------------------------------------------

DEC_8BIT_HACK

 SYNOPSIS
  Set the input mode for 8 bit control characters

 USAGE
  Int_Type DEC_8BIT_HACK

 DESCRIPTION
 If set to a non-zero value, a input character between 128 and 160
 will be converted into a two character sequence: `ESC' and the
 character itself stripped of the high bit + 64.  The motivation
 behind this variable is to enable the editor to work with VTxxx
 terminals that are in eight bit mode.

 SEE ALSO
  META_CHAR

--------------------------------------------------------------

DEFINING_MACRO

 SYNOPSIS
  Non-zero if defining a macro

 USAGE
  Int_Type DEFINING_MACRO

 DESCRIPTION
  The `DEFINING_MACRO' variable will be non-zero is a keyboard
  macro definition is in progress.

 SEE ALSO
  EXECUTING_MACRO

--------------------------------------------------------------

EXECUTING_MACRO

 SYNOPSIS
  Non-zero if a keyboard macro is currently executing

 USAGE
  Int_Type EXECUTING_MACRO

 DESCRIPTION
  The `EXECUTING_MACRO' variable will be non-zero is a keyboard
  macro is currently being executed.

 SEE ALSO

--------------------------------------------------------------

FN_CHAR

 SYNOPSIS
  Set the function key prefix

 USAGE
  Int_Type FN_CHAR

 DESCRIPTION
  If this variable is non-zero, function keys presses will
  generate a two character sequence: the first character is the
  value of the `FN_CHAR' itself followed by the character pressed.

 NOTES
   This variable is available only for Microsoft window systems.

 SEE ALSO
  ALT_CHAR, META_CHAR

--------------------------------------------------------------

IGNORE_USER_ABORT

 SYNOPSIS
  Control keyboard interrupt processing

 USAGE
  Int_Type IGNORE_USER_ABORT

 DESCRIPTION
 If set to a non-zero value, the keyboard interrupt character, e.g.,
 `Ctrl-G' will not trigger a S-Lang error.  When JED starts up,
 this value is set to 1 so that the user cannot interrupt the loading
 of site.sl.  Later, it is set to 0.

 SEE ALSO
  set_abort_char

--------------------------------------------------------------

KILL_LINE_FEATURE

 SYNOPSIS
  Configure the kill_line function

 USAGE
  Int_Type KILL_LINE_FEATURE

 DESCRIPTION
  If non-zero, kill_line will kill through end of line character if the
  cursor is at the beginning of a line.  Otherwise, it will kill only to
  the end of the line.

 SEE ALSO
  bolp

--------------------------------------------------------------

LASTKEY

 SYNOPSIS
  The value of the current key sequence

 USAGE
  String_Type LASTKEY

 DESCRIPTION
  The value of the `LASTKEY' variable represents the currently
  executing key sequence.

 NOTES
  Key sequences involving the null character may not be accurately
  recorded.

 SEE ALSO
  LAST_KBD_COMMAND

--------------------------------------------------------------

LAST_CHAR

 SYNOPSIS
  The Last Character read from the keyboard

 USAGE
  Int_Type LAST_CHAR

 DESCRIPTION
   The value of `LAST_CHAR' will be the last character read from
   the keyboard buffer.

 SEE ALSO

--------------------------------------------------------------

META_CHAR

 SYNOPSIS
  Specify the meta-character

 USAGE
  Int_Type META_CHAR

 DESCRIPTION
 This variable determines how input characters with the high bit set
 are to be treated.  If `META_CHAR' is less than zero, the character
 is passed through un-processed.  However, if `META_CHAR' is greater
 than or equal to zero, an input character with the high bit set is
 mapped to a two character sequence.  The first character of the
 sequence is the character whose ascii value is `META_CHAR' and the
 second character is the input with its high bit stripped off.

 SEE ALSO
  DISPLAY_EIGHT_BIT, DEC_8BIT_HACK

--------------------------------------------------------------

X_LAST_KEYSYM

 SYNOPSIS
  Keysym associated with the last key

 USAGE
  Int_Type X_LAST_KEYSYM

 DESCRIPTION
  The value of the `X_LAST_KEYSYM' variable represents the keysym
  of the most previously processed key.

 NOTES
  This variable is available only in the XWindows version of jed.

 SEE ALSO
  LASTKEY

--------------------------------------------------------------

buffer_keystring

 SYNOPSIS
  Append string "str" to the end of the input stream

 USAGE
  Void buffer_keystring (String str);

 DESCRIPTION
  Append string `str' to the end of the input stream to be read by JED's
  getkey routines.

 SEE ALSO
  ungetkey, getkey

--------------------------------------------------------------

copy_keymap

 SYNOPSIS
  Create a new keymap by copying another

 USAGE
  copy_keymap (String_Type new_map, String_Type old_map)

 DESCRIPTION
  The `copy_keymap' creates a new keymap whose name is given by
  `new_map' by copying an existing keymap specified by `old_map'.

 SEE ALSO
  make_keymap, keymap_p, use_keymap

--------------------------------------------------------------

definekey

 SYNOPSIS
  Bind keys to a function in a specific keymap

 USAGE
  Void definekey(String f, String key, String kmap);

 DESCRIPTION
  Unlike `setkey' which operates on the global keymap, this function is
  used for binding keys to functions in a specific keymap.  Here `f' is
  the function to be bound, `key' is a string of characters that make up
  the key sequence and `kmap' is the name of the keymap to be used.  See
  `setkey' for more information about the arguments.

 SEE ALSO
  setkey, undefinekey, make_keymap, use_keymap

--------------------------------------------------------------

dump_bindings

 SYNOPSIS
  Insert a list of keybindings for "map" into the buffer

 USAGE
  Void dump_bindings(String map);

 DESCRIPTION
  This functions inserts a formatted list of keybindings for the keymap
  specified by `map' into the buffer at the current point.

 SEE ALSO
  get_key_binding

--------------------------------------------------------------

enable_flow_control

 SYNOPSIS
  Turn on XON/XOFF flow control

 USAGE
  Void enable_flow_control (Integer flag);

 DESCRIPTION
  This Unix specific function may be used to turn XON/XOFF flow control
  on or off.  If `flag' is non-zero, flow control is turned on; otherwise,
  it is turned off.

--------------------------------------------------------------

flush_input

 SYNOPSIS
  Process all forms of queued input

 USAGE
  Void flush_input ();

 DESCRIPTION
  This function may be used to remove all forms of queued input.

 SEE ALSO
  input_pending, getkey

--------------------------------------------------------------

get_key_binding

 SYNOPSIS
  Return binding information about a key sequence

 USAGE
  (type, funct) = get_key_binding ([ keyseq ])

   Int_Type type;
   String_Type funct;
   String_Type keyseq;


 DESCRIPTION
  `get_key_binding' returns binding information about a specified
  key sequence.  If the optional parameter `keyseq' is not
  present, then `get_key_binding' will wait for the user to enter
  a key sequence.  If `keyseq' is present, then it denotes the key
  sequence.

  This function returns two values: a String_Type or
  Ref_Type representing the key
  sequence binding (`funct'), and an integer that indicates the
  key binding type:

    type   description
    -------------------------------------
      -1   funct is NULL, which indicates that the key has no binding
       0   funct is the name of a S-Lang function
       1   funct is the name of an internal function
       2   funct represents a macro ("@macro")
       3   funct represents a string to be inserted (" STRING")
       4   funct is a reference (Ref_Type) to the actual function


 SEE ALSO
  getkey, input_pending

--------------------------------------------------------------

_getkey

 SYNOPSIS
  Read an input byte from the keyboard

 USAGE
  Int_Type _getkey ()

 DESCRIPTION
  The `_getkey' function may be used to read a byte character from the
  keyboard.  It should be used instead of `getkey' when
  byte-semantics are required.

 SEE ALSO
  input_pending, _ungetkey, getkey

--------------------------------------------------------------

getkey

 SYNOPSIS
  Read an input character from the keyboard

 USAGE
  Long_Type getkey ()

 DESCRIPTION
  The `getkey' function may be used to read an input character from the
  keyboard.  If UTF-8 mode is in effect, the value returned can be
  negative if the key-sequence corresponds to an invalid UTF-8 encoded
  sequence.  In such a case, the value returned will correspond to the
  first byte of the sequence, and will be equal in magnitude to the
  value of byte.

 SEE ALSO
  input_pending, ungetkey, _getkey

--------------------------------------------------------------

input_pending

 SYNOPSIS
  Test whether there is pending keyboard input

 USAGE
  Integer input_pending (Integer tsecs);

 DESCRIPTION
  This function is used to see if keyboard input is available to be read
  or not. The parameter `tsecs' is the amount of time to wait for input
  before returning if input is not available.  The time unit for `tsecs'
  is one-tenth of a second.  That is, to wait up to one second, pass a
  value of ten to this routine.  It returns zero if no input is
  available, otherwise it returns non-zero.  As an example,

        define peek_key ()
        {
          variable ch;
          ifnot (input_pending (0)) return -1;
          ch = getkey ();
          ungetkey (ch);
          return ch;
        }

  returns the value of the next character to be read if one is
  available; otherwise, it returns -1.

 SEE ALSO
  getkey, ungetkey

--------------------------------------------------------------

keymap_p

 SYNOPSIS
  Test if a keymap "kmap" exists

 USAGE
  Integer keymap_p (String kmap);

 DESCRIPTION
  The `keymap_p' function may be used to determine whether or not a
  keymap with name `kmap' exists.  If the keymap specified by `kmap'
  exists, the function returns non-zero.  It returns zero if the keymap
  does not exist.

 SEE ALSO
  make_keymap, definekey

--------------------------------------------------------------

make_keymap

 SYNOPSIS
  Create a keymap with name "km"

 USAGE
  Void make_keymap (String km);

 DESCRIPTION
  The `make_keymap' function creates a keymap with a name specified by
  the `km' parameter.  The new keymap is an exact copy of the
  pre-defined `"global"' keymap.

 SEE ALSO
  use_keymap, copy_keymap, keymap_p, definekey, setkey

--------------------------------------------------------------

map_input

 SYNOPSIS
  Remap an input character "x" to "y".

 USAGE
  Void map_input (Integer x, Integer y);

 DESCRIPTION
  The `map_input' function may be used to remap an input character with
  ascii value `x' from the keyboard to a different character with ascii
  value `y'.  This mapping can be quite useful because it takes place
  before the editor interprets the character. One simply use of this
  function is to swap the backspace and delete characters.  Since the
  backspace character has an ascii value of `8' and the delete character
  has ascii value `127', the statement

        map_input (8, 127);

  maps the backspace character to a delete character and

        map_input (127, 8);

  maps the delete character to a backspace character.  Used together,
  these two statement effectively swap the delete and backspace keys.

 SEE ALSO
  getkey

--------------------------------------------------------------

prefix_argument

 SYNOPSIS
  Test if the user has entered a prefix argument

 USAGE
  Int_Type prefix_argument ()

 DESCRIPTION
  This function may be used to determine whether or not the user has
  entered a prefix argument from the keyboard.  If a prefix argument
  is present, its value is returned, otherwise NULL will be returned.

  Calling this function cancels the prefix-argument.

 EXAMPLE
  This example displays the prefix argument in the message area:

     arg = prefix_argument ();
     if (arg == NULL)
       message ("No Prefix Argument");
     else
       vmessage ("Prefix argument: %d", arg);


 NOTES
  The old semantics, which are still supported but deprecated allows
  an integer argument to be passed to the function.  This argument
  will be returned instead of NULL if no prefix-argument is present.
  Using the old semantics, the above example could be written as

     arg = prefix_argument (-9999);
     if (arg == -9999)
       message ("No Prefix Argument");
     else
       vmessage ("Prefix argument: %d", arg);


 SEE ALSO
  set_prefix_argument

--------------------------------------------------------------

set_abort_char

 SYNOPSIS
  change the keyboard character that generates an S-Lang interrupt

 USAGE
  Void set_abort_char (Integer ch);

 DESCRIPTION
  This function may be used to change the keyboard character that
  generates an S-Lang interrupt.  The parameter `ch' is the ASCII value
  of the character that will become the new abort character. The
  default abort character `Ctrl-G' corresponds to `ch=7'.

--------------------------------------------------------------

set_current_kbd_command

 SYNOPSIS
  Change the value of the CURRENT_KBD_COMMAND variable

 USAGE
  Void set_current_kbd_command (String_Type str)

 DESCRIPTION
  This function may be used to set the value of the
  `CURRENT_KBD_COMMAND' variable, which represents the function
  that the currently executing key-sequence invoked.

--------------------------------------------------------------

set_prefix_argument

 SYNOPSIS
  Set the prefix argument

 USAGE
  Void set_prefix_argument (Int_Type n)

 DESCRIPTION
  This function may be used to set the prefix argument to the value
  specified by `n'.  If `n' is less than zero, then the prefix
  argument is cancelled.

 SEE ALSO
  prefix_argument

--------------------------------------------------------------

setkey

 SYNOPSIS
  Bind a key sequence "key" to the function "fun"

 USAGE
  Void setkey(String fun, String key);

 DESCRIPTION
  This function may be used to define a key sequence specified by the
  string `key' to the function `fun'.  `key' can contain the `^'
  character which denotes that the following character is to be
  interpreted as a control character, e.g.,

        setkey("bob", "^Kt");

  sets the key sequence `Ctrl-K t' to the function `bob'.

  The `fun' argument is usually the name of an internal or a user
  defined S-Lang function.  However, if may also be a sequence of
  functions or even another keysequence (a keyboard macro).  For
  example,

        setkey ("bol;insert(string(whatline()))", "^Kw");

  assigns the key sequence `Ctrl-K w' to move to the beginning of a line
  and insert the current line number.  For more information about this
  important function, see the JED User Manual.

  Note that `setkey' works on the "global" keymap.

 SEE ALSO
  unsetkey, definekey

--------------------------------------------------------------

undefinekey

 SYNOPSIS
  Remove a keybinding from "kmap"

 USAGE
  Void undefinekey (String key, String kmap);

 DESCRIPTION
  This function may be used to remove a keybinding from a specified
  keymap.  The key sequence is given by the parameter `key' and the
  keymap is specified by the second parameter `kmap'.

 SEE ALSO
  unsetkey, definekey, what_keymap

--------------------------------------------------------------

_ungetkey

 SYNOPSIS
  Push a byte onto the input stream

 USAGE
  Void _ungetkey (Int_Type c)

 DESCRIPTION
  This function may be used to push a byte `c' onto the input
  stream. This means that the next keyboard byte to be read will be
  `c'.

 SEE ALSO
  buffer_keystring, _getkey, get_key_binding

--------------------------------------------------------------

ungetkey

 SYNOPSIS
  Push a character onto the input stream

 USAGE
  Void ungetkey (Integer c);

 DESCRIPTION
  This function may be used to push a character `c' represented by its
  character code onto the input stream.  This means that the next
  keyboard character to be read will be `c'.

 SEE ALSO
  buffer_keystring, getkey, get_key_binding

--------------------------------------------------------------

unsetkey

 SYNOPSIS
  Remove the definition of "key" from the "global" keymap

 USAGE
  Void unsetkey(String key);

 DESCRIPTION
  This function is used to remove the definition of the key sequence
  `key' from the "global" keymap.  This is sometimes necessary to bind
  new key sequences which conflict with other ones.  For example, the
  "global" keymap binds the keys `"^[[A"', `"^[[B"', `"^[[C"', and
  `"^[[D"' to the character movement functions.  Using
  `unsetkey("^[[A")' will remove the binding of `"^[[A"' from the global
  keymap but the other three will remain.  However, `unsetkey("^[[")'
  will remove the definition of all the above keys.  This might be
  necessary to bind, say, `"^[["' to some function.

 SEE ALSO
  setkey, undefinekey

--------------------------------------------------------------

use_keymap

 SYNOPSIS
  Set the keymap for the current buffer

 USAGE
  Void use_keymap (String km);

 DESCRIPTION
  This function may be used to dictate which keymap will be used by the
  current buffer.  `km' is a string value that corresponds to the name
  of a keymap.

 SEE ALSO
  make_keymap, copy_keymap, keymap_p, what_keymap

--------------------------------------------------------------

what_keymap

 SYNOPSIS
  Return the name of the current buffer's keymap

 USAGE
  String what_keymap ();

 DESCRIPTION
  This function returns the name of the keymap associated with the
  current buffer.

 SEE ALSO
  create_keymap, keymap_p

--------------------------------------------------------------

which_key

 SYNOPSIS
  Return the keys that are bound to the function "f"

 USAGE
  Integer which_key (String f);

 DESCRIPTION
  The `which_key' function returns the the number of keys that are
  bound to the function `f' in the current keymap.  It also returns
  that number of key sequences with control characters expanded as the
  two character sequence `^' and the the whose ascii value is the
  control character + 64. For example,

        define insert_key_bindings (f)
        {
           variable n, key;
           n = which_key (f);
           loop (n)
             {
                 str = ();
                 insert (str);
                 insert ("\n");
             }
        }

  inserts into the buffer all the key sequences that are bound to the
  function `f'.

 SEE ALSO
  get_key_binding, setkey, what_keymap

--------------------------------------------------------------

create_line_mark

 SYNOPSIS
  Return a line mark (of the type User_Mark)

 USAGE
  User_Mark create_line_mark (Integer c)

 DESCRIPTION
  The function `create_line_mark' returns an object of the type
  `User_Mark'.  This object contains information regarding the current
  position and current buffer.  The parameter `c' is used to specify the
  color to use when the line is displayed.

 SEE ALSO
  create_user_mark, set_color_object

--------------------------------------------------------------

create_user_mark

 SYNOPSIS
  Return an object of the type User_Mark

 USAGE
  User_Mark create_user_mark ()

 DESCRIPTION
  The function `create_user_mark' returns an object of the type
  `User_Mark'. This object contains information regarding the current
  position and current buffer.

 SEE ALSO
  move_user_mark, goto_user_mark, user_mark_buffer

--------------------------------------------------------------

dupmark

 SYNOPSIS
  Duplicate the mark (if set), return success

 USAGE
  Integer dupmark ()

 DESCRIPTION
  This function returns zero if the mark is not set or, if the mark is
  set, a duplicate of it is pushed onto the mark stack and a non-zero
  value is returned.

 SEE ALSO
  push_mark, markp, pop_mark

--------------------------------------------------------------

goto_user_mark

 SYNOPSIS
  Return to the position of the User Mark "mark"

 USAGE
  Void goto_user_mark (User_Mark mark)

 DESCRIPTION
  This function returns to the position of the User Mark `mark'.  Before
  this function may be called, the current buffer must be the buffer
  associated with the makr.

 SEE ALSO
  move_user_mark, create_user_mark, user_mark_buffer

--------------------------------------------------------------

is_user_mark_in_narrow

 SYNOPSIS
  Test if the user mark "m" is within the narrowed buffer.

 USAGE
  Integer is_user_mark_in_narrow (User_Mark m)

 DESCRIPTION
  This function returns non-zero if the user mark `m' refers to a
  position that is within the current narrow restriction of the current
  buffer.  It returns zero if the mark lies outside the restriction.
  An error will be generated if `m' does not represent a mark for the current
  buffer.

 SEE ALSO
  goto_user_mark, move_user_mark

--------------------------------------------------------------

is_visible_mark

 SYNOPSIS
  Test if the mark is a visible mark

 USAGE
  is_visible_mark ()

 DESCRIPTION
  This function may be used to test whether or not the mark is a visible
  mark.  A visible mar is one which causes the region defined by it to
  be highlighted.
  It returns `1' is the mark is visible, or `0' if the mark
  is not visible or does not exist.

 SEE ALSO
  markp, push_mark

--------------------------------------------------------------

markp

 SYNOPSIS
  Test if a mark is set

 USAGE
  Void markp ()

 DESCRIPTION
  This function returns a non-zero value if the mark is set; otherwise, it
  returns zero.  If a mark is set, a region is defined.

 SEE ALSO
  push_mark, pop_mark, check_region, push_spot

--------------------------------------------------------------

move_user_mark

 SYNOPSIS
  Move the User Mark "mark" to the current position

 USAGE
  Void move_user_mark (User_Mark mark)

 DESCRIPTION
  This function call takes a previously created User Mark, `mark', and
  moves it to the current position and buffer.  This means that if one
  subsequently calls `goto_user_mark' with this mark as an argument, the
  the position will be set to the new position.

  Note: This function call is not equivalent to simply using

        mark = create_user_mark ();

  because independent copies of a User Mark are not created upon
  assignment.  That is, if one has

        variable mark1, mark2;
        setbuf ("first");
        mark1 = create_user_mark ();
        mark2 = mark1;
        setbuf ("second");

  and then calls

        move_user_mark (mark1);

  both user marks, `mark1' and `mark2' will be moved since
  they refer to the same mark.

 SEE ALSO
  goto_user_mark, create_user_mark, user_mark_buffer

--------------------------------------------------------------

pop_mark

 SYNOPSIS
  Pop the most recent mark (if "g" is non-zero, go there)

 USAGE
  pop_mark (Integer g)

 DESCRIPTION
  `pop_mark' pops the most recent mark pushed onto the mark stack.  If
  the argument `g' is non-zero, the editing position will be moved to
  the location of the mark.  However, if `g' is zero, the editing
  position will be unchanged.

 SEE ALSO
  push_mark, pop_spot, markp, check_region, goto_user_mark

--------------------------------------------------------------

pop_spot

 SYNOPSIS
  Pop the last spot (and go there)

 USAGE
  Void pop_spot ()

 DESCRIPTION
  This function is used after a call to `push_spot' to return to the
  editing position at the last call to `push_spot' in the current buffer.

 SEE ALSO
  push_spot, pop_mark

--------------------------------------------------------------

push_mark

 SYNOPSIS
  Mark the current position as the beginning of a region

 USAGE
  Void push_mark()

 DESCRIPTION
  This function marks the current position as the beginning of a region.
  and pushes other marks onto a stack.  A region is defined by this
  mark and the editing point.  The mark is removed from the stack only
  when the function `pop_mark' is called.
  For example,

        define mark_buffer ()
        {
          bob ();
          push_mark ();
          eob ();
        }

  marks the entire buffer as a region.

 SEE ALSO
  pop_mark, push_spot, markp, dupmark, check_region

--------------------------------------------------------------

push_spot

 SYNOPSIS
  Push the current buffer location onto a stack

 USAGE
  Void push_spot ()

 DESCRIPTION
  `push_spot' pushes the location of the current buffer location onto a
  stack.  This function does not set the mark.  The function `push_mark'
  should be used for that purpose. The spot can be returned to using the
  function `pop_spot'.
  Note: Spots are local to each buffer.  It is not possible to call
  `push_spot' from one buffer and then subsequently call `pop_spot'
  from another buffer to return to the position in the first buffer.
  For this purpose, one must use user marks instead.

 SEE ALSO
  pop_spot, push_mark, create_user_mark

--------------------------------------------------------------

user_mark_buffer

 SYNOPSIS
  Return the name of the buffer with User Mark "m"

 USAGE
  String user_mark_buffer (User_Mark m)

 DESCRIPTION
  This function returns the name of the buffer associated with the
  User Mark specified by `m'.

 SEE ALSO
  goto_user_mark, create_user_mark, move_user_mark, is_user_mark_in_narrow

--------------------------------------------------------------

enable_top_status_line

 SYNOPSIS
  Set the top_status_line: 1 enabled, 0 hidden

 USAGE
  Void enable_top_status_line (Integer x);

 DESCRIPTION
  If x is non-zero, the top status line is enabled.  If x is zero, the
  top status line is disabled and hidden.

 SEE ALSO
  set_top_status_line

--------------------------------------------------------------

menu_append_item

 SYNOPSIS
  Append an entry to a menu

 USAGE
  menu_append_item (menu, name, fun [,client_data])

    String_Type menu, name;
    String_Type or Ref_Type fun;
    Any_Type client_data


 DESCRIPTION
   The `menu_append_item' function appends a menu item called
   `name' to the menu `menu'.  If called with 3 arguments,
   the third argument must be a string that will get executed or
   called when the menu item is selected.

   When called with 4 arguments, the `fun' argument may be either
   a string or a reference to a function.  When the item is selected,
   the function will be called and `client_data' will be passed to
   it.

 SEE ALSO
  menu_append_popup

--------------------------------------------------------------

menu_append_popup

 SYNOPSIS
  Append a popup menu to a menu

 USAGE
  menu_append_popup (String_Type parent_menu, String_Type popup_name)

 DESCRIPTION
  The `menu_append_popup' function may be used to append a new
  popup menu with name `popup_name' to the menu `parent_menu',
  which may either be another popup menu or a menu bar.

 SEE ALSO
  menu_append_item, menu_append_separator

--------------------------------------------------------------

menu_append_separator

 SYNOPSIS
  Append a separator to a menu

 USAGE
  menu_append_separator (String_Type menu)

 DESCRIPTION
  The `menu_append_separator' function appends a menu item
  separator to the menu `menu'.

 SEE ALSO
  menu_append_item, menu_append_popup

--------------------------------------------------------------

menu_copy_menu

 SYNOPSIS
  Copy a menu to another

 USAGE
  menu_copy_menu (String_Type dest, String_Type src)

 DESCRIPTION
  Then `menu_copy_menu' function copies the menu item, which may
  be another popup menu, to another popup menu.

 SEE ALSO
  menu_append_popup, menu_append_item

--------------------------------------------------------------

menu_create_menu_bar

 SYNOPSIS
  Create a menu bar

 USAGE
  menu_create_menu_bar (String_Type name)

 DESCRIPTION
  The `menu_create_menu_bar' function may be used to create a new
  menu bar called `name'.  The new menu bar may be associated with
  a buffer via the `menu_use_menu_bar' function.

 SEE ALSO
  menu_use_menu_bar, menu_append_popup

--------------------------------------------------------------

menu_delete_item

 SYNOPSIS
  Delete a menu item

 USAGE
  menu_delete_item (String_Type name)

 DESCRIPTION
  The `menu_delete_item' function deletes the menu called
  `name' and all of its submenus.

 EXAMPLE
  To delete the `System' menu from the global menu bar, use

    menu_delete_item ("Global.S&ystem");


 SEE ALSO
  menu_delete_items

--------------------------------------------------------------

menu_delete_items

 SYNOPSIS
  Delete the items from a menu

 USAGE
  menu_delete_items (String_Type menu)

 DESCRIPTION
  The `menu_delete_items' function deletes all the menu items
  attached to a specified popup menu.  However, unlike the related
  function `menu_delete_item', the popup menu itself will not be
  removed.

 SEE ALSO
  menu_delete_item, menu_append_popup

--------------------------------------------------------------

menu_insert_item

 SYNOPSIS
  Insert an entry into a menu at a specified position

 USAGE
  menu_insert_item (position, menu, name, fun [,client_data])

    Int_Type/String_Type position;
    String_Type menu, name;
    String_Type or Ref_Type fun;
    Any_Type client_data;


 DESCRIPTION
   The `menu_insert_item' function inserts a menu item called
   `name' to the menu `menu' at a specified position.

   The insertion position may be specified as an integer, or as the
   name of a menu item within `parent_menu'.  When specified as an
   integer, the insertion will take place at the corresponding
   position of the menu, where zero denotes the first item.  If the
   position specifier is the name of a menu item, the the insertion
   will take place before that item.

   If called with 4 arguments, the third argument must be a string
   that will get executed or called when the menu item is selected.

   When called with 5 arguments, the `fun' argument may be either
   a string or a reference to a function.  When the item is selected,
   the function will be called and `client_data' will be passed to
   it.

 SEE ALSO
  menu_append_item, menu_insert_popup, menu_insert_separator

--------------------------------------------------------------

menu_insert_popup

 SYNOPSIS
  Inserts a popup menu into a menu at a specified position

 USAGE
  menu_insert_popup (position, parent_menu, popup_name)

    Int_Type/String_Type position;
    String_Type parent_menu, popup_name;


 DESCRIPTION
   The `menu_insert_popup' function will insert a popup menu with
   name `popup_name' into a pre-existing popup menu or menu bar
   with name given by {parent_menu}.

   The insertion position may be specified as an integer, or as the
   name of a menu item within `parent_menu'.  When specified as an
   integer, the insertion will take place at the corresponding
   position of the menu, where zero denotes the first item.  If the
   position specifier is the name of a menu item, the the insertion
   will take place before that item.

 SEE ALSO
  menu_append_popup, menu_insert_item, menu_insert_separator

--------------------------------------------------------------

menu_insert_separator

 SYNOPSIS
  Inserts a separator into a menu at a specified position

 USAGE
  menu_insert_separator (position, parent_menu)

   Int_Type/String_Type position;
   String_Type parent_menu;


 DESCRIPTION
   The `menu_insert_separator' function inserts a separator
   into a pre-existing popup menu or menu bar with name given
   by `parent_menu'.

   The insertion position may be specified as an integer, or as the
   name of a menu item within `parent_menu'.  When specified as an
   integer, the insertion will take place at the corresponding
   position of the menu, where zero denotes the first item.  If the
   position specifier is the name of a menu item, the the insertion
   will take place before that item.

 SEE ALSO
  menu_append_separator, menu_insert_item, menu_insert_popup

--------------------------------------------------------------

menu_select_menu

 SYNOPSIS
  Select a menu item

 USAGE
  menu_select_menu (String_Type menu)

 DESCRIPTION
  This function allows interpreter access to a specified menu it.  If
  the parameter specifies a popup menu, then the corresponding menu
  will be invoked.  Otherwise the function bound to the specified menu
  will be called.

 EXAMPLE
    menu_select_menu ("Global.&File");
    menu_select_menu ("Global.&File.Save &Buffers");

 SEE ALSO
  menu_insert_item

--------------------------------------------------------------

menu_set_init_menubar_callback

 SYNOPSIS
  Set the initialize menu bar callback

 USAGE
  menu_set_init_menubar_callback (Ref_Type cb)

 DESCRIPTION
  The `menu_set_init_menubar_callback' may be used to specify the
  function that is to be called whenever a menu bar may need to be
  updated.  This may be necessary when the user switches buffers or
  modes.  The callback function must accept a single argument which is
  the name of the menubar.

 SEE ALSO
  menu_set_select_menubar_callback, menu_create_menu_bar

--------------------------------------------------------------

menu_set_menu_bar_prefix

 SYNOPSIS
  Set the prefix string to be displayed on the menu bar

 USAGE
  menu_set_menu_bar_prefix (String_Type menubar, String_Type prefix)

 DESCRIPTION
  The `menu_set_menu_bar_prefix' specifies the string that is to
  be displayed on the specified menu bar.  The default prefix is
  `"F10 key ==> "'.

 SEE ALSO
  menu_create_menu_bar

--------------------------------------------------------------

menu_set_object_available

 SYNOPSIS
  Set the availability of a menu item

 USAGE
  menu_set_object_available (String_Type menuitem, Int_Type flag)

 DESCRIPTION
  The `menu_set_object_available' function may be used to activate
  or inactivate the specified menu item, depending upon whether
  `flag' is non-zero or zero, respectively.

 SEE ALSO
  menu_append_item

--------------------------------------------------------------

menu_set_select_menubar_callback

 SYNOPSIS
  Set the function to be called when the menu bar is activated

 USAGE
  menu_set_select_menubar_callback (String_Type menubar, Ref_Type f)

 DESCRIPTION
  The `menu_set_select_menubar_callback' function is used to
  indicate that the function whose reference is `f' should be
  called whenever the menu bar is selected.  The callback function is
  called with one argument: the name of the menu bar.

 SEE ALSO
  menu_set_init_menubar_callback, menu_set_select_popup_callback

--------------------------------------------------------------

menu_set_select_popup_callback

 SYNOPSIS
  Specify the function to be called prior to a popup

 USAGE
  menu_set_select_popup_callback (String_Type popup, Ref_Type f

 DESCRIPTION
  The `menu_set_select_popup_callback' function may be used to
  specify a function that should be called just before a popup menu is
  displayed.  The callback function must be defined to take a single
  argument, namely the name of the popup menu.

  The basic purpose of this function is to allow the creation of a
  dynamic popup menu.  For this reason, the popup menu will have its
  items deleted before the callback function is executed.

 SEE ALSO
  menu_set_select_menubar_callback, menu_append_item

--------------------------------------------------------------

menu_use_menu_bar

 SYNOPSIS
  Associate a menu bar with the current buffer

 USAGE
  menu_use_menu_bar (String_Type menubar)

 DESCRIPTION
  The `menu_use_menu_bar' function may be used to associate a
  specified menu bar with the current buffer. If no menu bar has been
  associated with a buffer, the `"Global"' menu bar will be used.

 SEE ALSO
  menu_create_menu_bar

--------------------------------------------------------------

set_top_status_line

 SYNOPSIS
  Set the string to be displayed at the top of the display

 USAGE
  String set_top_status_line (String str);

 DESCRIPTION
  This functions sets the string to be displayed at the top of the
  display. It returns the value of the line that was previously
  displayed.

 SEE ALSO
  enable_top_status_line

--------------------------------------------------------------

MESSAGE_BUFFER

 SYNOPSIS
  The Contents of the Message Buffer

 USAGE
  String_Type MESSAGE_BUFFER

 DESCRIPTION
  The `MESSAGE_BUFFER' variable is a read-only string variable
  whose value indicates the text to be displayed or is currently
  displayed in the message buffer.

 SEE ALSO
  message, vmessage, error, verror

--------------------------------------------------------------

beep

 SYNOPSIS
  Beep (according to the value of `IGNORE_BEEP')

 USAGE
  Void beep ();

 DESCRIPTION
  The `beep' function causes the terminal to beep according to the value
  of the variable `IGNORE_BEEP'.

 SEE ALSO
  tt_send

 SEE ALSO
  IGNORE_BEEP

--------------------------------------------------------------

clear_message

 SYNOPSIS
  Clear the message line of the display

 USAGE
  Void clear_message ();

 DESCRIPTION
  This function may be used to clear the message line of the display.

 SEE ALSO
  message, update, error, flush

--------------------------------------------------------------

flush

 SYNOPSIS
  Immediately display "msg" as a message in the mini-buffer

 USAGE
  Void flush (String msg);

 DESCRIPTION
  The `flush' function behaves like `message' except that it immediately
  displays its argument `msg' as a message in the mini-buffer.  That is,
  it is not necessary to call `update' to see the message appear.

 SEE ALSO
  message, error

--------------------------------------------------------------

tt_send

 SYNOPSIS
  Send "s" directly to the terminal

 USAGE
  Void tt_send (String s);

 DESCRIPTION
  This function may be used to send a string specified by `s' directly
  to the terminal with no interference by the editor.  One should
  exercise caution when using this routine since it may interfere with
  JED's screen management routines forcing one to redraw the screen.
  Nevertheless, it can serve a useful purpose.  For example, when run in
  an XTerm window, using

        tt_send ("\e[?9h");

  will enable sending mouse click information to JED encoded as
  keypresses.

 SEE ALSO
  beep

--------------------------------------------------------------

MINIBUFFER_ACTIVE

 SYNOPSIS
  Non-zero is the mini-buffer is in use

 USAGE
  Int_Type MINIBUFFER_ACTIVE

 DESCRIPTION
 The `MINIBUFFER_ACTIVE' variable will be non-zero if the
 mini-buffer is in use.

 SEE ALSO
  read_mini

--------------------------------------------------------------

_add_completion

 SYNOPSIS
  "add_completion" for "n" names "f1", ... "fn"

 USAGE
  Void _add_completion (String f1, String f2, ..., Integer n);

 DESCRIPTION
  The `_add_completion' function is like the `add_completion' function
  except that it takes `n' names `f1', ... `fn'.
  For example,

        _add_completion ("fun_a", "fun_b", 2);

  is equivalent to

        add_completion ("fun_a");
        add_completion ("fun_b");


 SEE ALSO
  add_completion

--------------------------------------------------------------

add_completion

 SYNOPSIS
  Add the function "f" to the list for mini-buffer completion

 USAGE
  Void add_completion(String f);

 DESCRIPTION
  The `add_completion' function adds the user defined S-Lang function
  with name specified by the string `f' to the list of functions that
  are eligible for mini-buffer completion.  The function specified by
  `f' must be already defined before this function is called.  The
  S-Lang function `is_defined' may be used to test whether or not the
  function is defined.

 SEE ALSO
  read_with_completion, _add_completion

--------------------------------------------------------------

get_mini_response

 SYNOPSIS
  Prompt for a key

 USAGE
  Int_Type get_mini_response (String_Type str)

 DESCRIPTION
  The `get_mini_response' function display the text `str' at
  the bottom of the screen and waits for the user to press a key.  The
  key is returned.

 SEE ALSO
  read_mini, getkey, flush

--------------------------------------------------------------

get_y_or_n

 SYNOPSIS
  Prompt for a y or n response

 USAGE
  Int_Type get_y_or_n (String_Type str)

 DESCRIPTION
  The `get_y_or_n' function forms a y/n question by
  concatenating `"? (y/n)"' to `str' and displays the result
  at the bottom of the display.  It returns 1 if the user responds
  with `y', 0 with `n', or `-1' if the user cancelled
  the prompt.

 SEE ALSO
  get_yes_no, get_mini_response

--------------------------------------------------------------

get_yes_no

 SYNOPSIS
  Get a yes or no response from the user

 USAGE
  Integer get_yes_no (String s);

 DESCRIPTION
  This function may be used to get a yes or no response from the
  user.  The string parameter `s' will be used to construct the prompt
  by concatenating the string `"? (yes/no)"' to `s'.
  It returns `1' if the answer is yes or `0' if the answer is no.

 SEE ALSO
  getkey, flush, message

--------------------------------------------------------------

read_mini

 SYNOPSIS
  Read input from the mini-buffer

 USAGE
  String read_mini (String prompt, String dflt, String init);

 DESCRIPTION
  The `read_mini' function reads a line of input from the user in the
  mini-buffer.  The first parameter, `prompt', is used to prompt the
  user.  The second parameter, `dflt', is what is returned as a default
  value if the user simply presses the return key.  The final parameter,
  `init', is stuffed into the mini-buffer for editing by the user.
  For example,

        define search_whole_buffer ()
        {
          variable str;
          str = read_mini ("Search for:", "", "");
          ifnot (strlen (str)) return;
          ifnot (fsearch (str))
             {
               push_mark (); bob ();
               if (fsearch (str)) pop_mark (0);
               else pop_mark (1);
                 {
                    pop_mark (1);
                    error ("Not found");
                 }
             }
        }

  reads a string from the user and then searches forward for it and if
  not found, it resumes the search from the beginning of the buffer.

 NOTES
  If the user aborts the function `mini_read' by pressing the
  keyboard quit character (e.g., Ctrl-G), an error is signaled.  This
  error can be caught by a `try'-`catch' statement and the appropriate action
  taken. Also if the mini-buffer is already in use, this function should
  not be called.  The variable `MINIBUFFER_ACTIVE' may be checked to
  determine if this is the case or not.

 SEE ALSO
  read_with_completion, getkey, input_pending

 SEE ALSO
  MINIBUFFER_ACTIVE

--------------------------------------------------------------

read_with_completion

 SYNOPSIS
  Read input from the minibuffer (with completion)

 USAGE
  Void read_with_completion (String prt, String dflt, String s, Integer type);

 DESCRIPTION
  This function may be used to read one of the objects specified by the
  last parameter `type'.  The first parameter, `prt', is used as a
  prompt, the second parameter, `dflt', is used to specify a default,
  and the third parameter, `s', is used to initialize the string to
  be read.
  `type' is an integer with the following meanings:

        'f'   file name
        'b'   buffer name
        'F'   function name
        'V'   variable name.


  Finally, if `type' has the value `'s'', then the set of completions
  will be defined by a zeroth parameter, `list', to the function call.
  This parameter is simple a comma separated list of completions.
  For example,

        read_with_completion ("Larry,Curly,Moe", "Favorite Stooge:",
                              "Larry", "", 's');

  provides completion over the set of three stooges.
  The function returns the string read.

 SEE ALSO
  read_mini

--------------------------------------------------------------

set_expansion_hook

 SYNOPSIS
  Specify a function to expand a filename upon TAB completion

 USAGE
  Void set_expansion_hook (String fname);

 DESCRIPTION
  This function may be used to specify a function that will be called to
  expand a filename upon TAB completion.  The function `fname' must
  already be defined.  When `fname' is called, it is given a string to
  be expanded. If it changes the string, it must return a non-zero value
  and the modified string.  If the string is not modified, it must simply
  return zero.

--------------------------------------------------------------

BATCH

 SYNOPSIS
  Non-Zero if in Batch Mode

 USAGE
  Int_Type BATCH (read-only)

 DESCRIPTION
 The value of `BATCH' will be 0 if the editor is run
 in interactive or full-screen mode.  It will be 1 if the editor is
 in batch mode (via the `-batch' comment line argument).  If the
 editor is in script mode (via `-script'), then the value of
 `BATCH' will be 2.

--------------------------------------------------------------

JED_ROOT

 SYNOPSIS
  Location of the JED root directory

 USAGE
  String_Type JED_ROOT

 DESCRIPTION
  This is a read-only string variable whose value indicates JED's root
  directory.  This variable may be set using the `JED_ROOT'
  environment variable.

 SEE ALSO
  get_jed_library_path, set_jed_library_path, getenv

--------------------------------------------------------------

_jed_secure_mode (read-only)

 SYNOPSIS
  Indicates if the editor is in secure mode

 USAGE
  Int_Type _jed_secure_mode

 DESCRIPTION
  The value of `_jed_secure_mode' will be non-zero if the editor
  is running in secure mode.  This mode does not allow any access to
  the shell.

 SEE ALSO
  system

--------------------------------------------------------------

_jed_version

 SYNOPSIS
  The JED version number

 USAGE
  Int_Type _jed_version

 DESCRIPTION
  The value of `_jed_version' represents the version number of the
  editor.

 SEE ALSO
  _jed_version_string, _slang_version

--------------------------------------------------------------

_jed_version_string

 SYNOPSIS
  The JED version number as a string

 USAGE
  String_Type _jed_version_string

 DESCRIPTION
  The value of `_jed_version_string' represents the version number
  of the editor.

 SEE ALSO
  _jed_version, _slang_version_string

--------------------------------------------------------------

call

 SYNOPSIS
  Execute an internal function

 USAGE
  Void call(String f)

 DESCRIPTION
  The `call' function is used to execute an internal function which is
  not directly accessible to the S-Lang interpreter.

 SEE ALSO
  is_internal

--------------------------------------------------------------

core_dump

 SYNOPSIS
  Exit the editor dumping the state of some crucial variables

 USAGE
  Void core_dump(String msg, Integer severity)

 DESCRIPTION
  `core_dump' will exit the editor dumping the state of some crucial
  variables. If `severity' is `1', a core dump will result.  Immediately
  before dumping, `msg' will be displayed.

 SEE ALSO
  exit, exit_jed, quit_jed, message, error

--------------------------------------------------------------

define_word

 SYNOPSIS
  Define the set of characters that form a word

 USAGE
  Void define_word (String s)

 DESCRIPTION
  This function is used to define the set of characters that form a
  word. The string `s' consists of those characters or ranges of
  characters that define the word.  For example, to define only the
  characters `A-Z' and `a-z' as word characters, use:

        define_word ("A-Za-z");

  To include a hyphen as part of a word, it must be the first character
  of the control string `s'.  So for example,

        define_word ("-i-n");

  defines a word to consist only of the letters `i' to `n' and the
  hyphen character.

--------------------------------------------------------------

exit

 SYNOPSIS
  Exit the editor gracefully with a status value

 USAGE
  exit (Int_Type status)

 DESCRIPTION
  This function performs the same actions as `exit_jed' except
  that the status code returned to the shell may be specified.

 SEE ALSO
  _exit, exit_jed

--------------------------------------------------------------

exit_jed

 SYNOPSIS
  Exit JED in a graceful and safe manner

 USAGE
  Void exit_jed ()

 DESCRIPTION
  This function should be called to exit JED in a graceful and safe
  manner.  If any buffers have been modified but not saved, the user is
  queried about whether or not to save each one first.  `exit_jed' calls
  the S-Lang hook `exit_hook' if it is defined.  If `exit_hook' is
  defined, it must either call `quit_jed' or `exit_jed' to really exit
  the editor.  If `exit_jed' is called from `exit_hook', `exit_hook' will
  not be called again.  For example:

        define exit_hook ()
        {
          flush ("Really Exit?");

          forever
            {
              switch (getkey () & 0x20)    % map to lowercase
               { case 'y': exit_jed (); }
               { case 'n': return; }
              beep ();
            }
        }

  may be used to prompt user for confirmation of exit.

 SEE ALSO
  exit, quit_jed, suspend, flush, getkey

 SEE ALSO
  BATCH

--------------------------------------------------------------

get_last_macro

 SYNOPSIS
  Return characters composing the last keyboard macro

 USAGE
  String get_last_macro ()

 DESCRIPTION
  This function returns characters composing the last keyboard macro.  The
  characters that make up the macro are encoded as themselves except the
  following characters:

        '\n'    ---->   \J
        null    ---->   \@
         \      ---->   \\
         '"'    ---->   \"


--------------------------------------------------------------

get_passwd_info

 SYNOPSIS
  Return information about the user "username"

 USAGE
  (dir, shell, pwd, uid, gid) = get_passwd_info (String username)

 DESCRIPTION
  This function returns password information about the user with name
  `username'.  The returned variables have the following meaning:

        dir:     login directory
        shell:   login shell
        pwd:     encrypted password
        uid:     user identification number
        gid:     group identification number

  If the user does not exist, or the system call fails, the function
  returns with `uid' and `gid' set to `-1'.

--------------------------------------------------------------

getpid

 SYNOPSIS
  Return the process identification number for the editor

 USAGE
  Integer getpid ()

 DESCRIPTION
  This function returns the process identification number for the current
  editor process.

--------------------------------------------------------------

is_internal

 SYNOPSIS
  Test if function "f" is defined as an internal function

 USAGE
  Integer is_internal(String f)

 DESCRIPTION
  `is_internal' returns non-zero is function `f' is defined as an
  internal function or returns zero if not.  Internal functions not
  immediately accessible from S-Lang; rather, they must be called using
  the `call' function.  See also the related S-Lang function
  `is_defined' in the S-Lang Programmer's Reference.

 SEE ALSO
  call

--------------------------------------------------------------

quit_jed

 SYNOPSIS
  Quit the editor immediately: no autosave, no hooks

 USAGE
  Void quit_jed ([ status ])

 DESCRIPTION
 This function quits the editor immediately without saving any buffers
 and without any exit hooks called.  The function `exit_jed'
 should be called when it is desired to exit in a safe way.

 The exit status of the program may be specified via the optional
 integer argument.  If called with no argument, a value of 0 will be
 used as the exit status.

 SEE ALSO
  exit_jed

--------------------------------------------------------------

random

 SYNOPSIS
  Return a random number in the range [0, "nmax"[

 USAGE
  Integer random (Integer seed, Integer nmax)

 DESCRIPTION
  The `random' function returns a random number in the range 0 to, but
  not including, `nmax'.  If the first parameter `seed' is 0, the
  number generated depends on a previous seed.  If `seed' is -1, the
  current time and process id will be used to seed the random number
  generator; otherwise `seed' will be used.

  Example: generate 1000 random integers in the range 0-500 and insert
  them into buffer:

        () = random (-1, 0);  % seed generator using time and pid
        loop (1000)
          insert (Sprintf ("%d\n", random (0, 500), 1));

  Note: The random number is generated via the expression:

        r = r * 69069UL + 1013904243UL;


--------------------------------------------------------------

set_line_readonly

 SYNOPSIS
  Turn on or off the read-only state of the current line

 USAGE
  Void set_line_readonly (Integer flag)

 DESCRIPTION
  This function may be used to turn on or off the read-only state of the
  current line.  If the integer parameter `flag' is non-zero, the line
  will be made read-only.  If the parameter is zero, the read-only state
  will be turned off.

 SEE ALSO
  getbuf_info

--------------------------------------------------------------

set_undo_position

 SYNOPSIS
  Add the current position to the undo stack

 USAGE
  set_undo_position ()

 DESCRIPTION
 This function adds the current position to the buffer's undo stack.
 Occasionally this may be necessary when using
 `narrow_to_region' to prevent the cursor from moving to the
 beginning or the end of a previously narrowed region during "undo".

 SEE ALSO
  narrow_to_region

--------------------------------------------------------------

suspend

 SYNOPSIS
  Suspend the editor

 USAGE
  Void suspend ()

 DESCRIPTION
  The action of this command varies with the operating system.
  Under Unix, the editor will be suspended and control will pass to the
  parent process.  Under VMS and MSDOS, a new subprocess will be spawned.
  Before suspension, `suspend_hook' is called.  When the editor is
  resumed, `resume_hook' will be called.  These hooks are user-defined
  functions that take no arguments and return no values.

--------------------------------------------------------------

usleep

 SYNOPSIS
  Pause for "ms" milliseconds

 USAGE
  Void usleep (Integer ms)

 DESCRIPTION
  A call to usleep will cause the editor to pause for `ms' milliseconds.

 SEE ALSO
  input_pending

--------------------------------------------------------------

vms_get_help

 SYNOPSIS
  Interact with the VMS help system from within the editor

 USAGE
  Void vms_get_help (String hlp_file, String hlp_topic)

 DESCRIPTION
  This function may be used on VMS systems to interact with the VMS help
  system from within the editor.  `hlp_file' is the name of the help file
  to use and `hlp_topic' is the topic for which help is desired.

--------------------------------------------------------------

vms_send_mail

 SYNOPSIS
  interface to the VMS callable mail facility

 USAGE
  Integer vms_send_mail (String recip_lis, String subj)

 DESCRIPTION
  This VMS specific function provides an interface to the VMS callable
  mail facility.  The first argument, `recip_lis', is a comma separated list
  of email addresses and `subj' is a string that represents the subject of
  the email.  The current buffer will be emailed.  It returns `1' upon
  success and `0' upon failure.

--------------------------------------------------------------

gpm_disable_mouse

 SYNOPSIS
  Disable support for the GPM mouse

 USAGE
  gpm_disable_mouse ()

 DESCRIPTION
  The `gpm_disable_mouse' function may be used to inactivate
  support for the GPM mouse.

 NOTES
  This function may not be available on all systems.

 SEE ALSO
  mouse_get_event_info

--------------------------------------------------------------

mouse_get_event_info

 SYNOPSIS
  Return information about the last processed mouse event

 USAGE
  (x, y, state) = mouse_get_event_info ()

 DESCRIPTION
  This function returns the position of the last processed
  mouse event, and the state of the mouse buttons and shift
  keys before the event.

  `x' and `y' represent the column and row, respectively, where
  the event took place. They are measured with relative to the
  top left corner of the editor's display.

  `state' is a bitmapped integer whose bits are defined as follows:

         1  Left button pressed
         2  Middle button pressed
         4  Right button pressed
         8  Shift key pressed
        16  Ctrl key pressed

  Other information such as the button that triggered the event is
  available when the mouse handler is called.  As a result, this information
  is not returned by `mouse_get_event_info'.

 SEE ALSO
  mouse_set_default_hook, set_buffer_hook

--------------------------------------------------------------

mouse_map_buttons

 SYNOPSIS
  Map one mouse button to another

 USAGE
  Void mouse_map_buttons (Integer x, Integer y)

 DESCRIPTION
  This function may be used to map one mouse button to another.  The
  button represented by `x' will appear as `y'.

--------------------------------------------------------------

mouse_set_current_window

 SYNOPSIS
  Change to the window to that of the the mouse event

 USAGE
  Void mouse_set_current_window ()

 DESCRIPTION
  Use of this function results in changing windows to the window that
  was current at the time of the mouse event.

 SEE ALSO
  mouse_set_default_hook

--------------------------------------------------------------

mouse_set_default_hook

 SYNOPSIS
  Associate a function "fun" with the mouse event "name"

 USAGE
  Void set_default_mouse_hook (String name, String fun)

 DESCRIPTION
  This function associates a slang function `fun' with the mouse event
  specified by `name'.  The first parameter `name' must be one of the
  following:

            "mouse_up"          "mouse_status_up"
            "mouse_down"        "mouse_status_down"
            "mouse_drag"        "mouse_status_drag"
            "mouse_2click"      "mouse_status_2click"
            "mouse_3click"      "mouse_status_3click"

  The meaning of these names should be obvious.  The second parameter,
  `fun' must be defined as

           define fun (line, column, btn, shift)

  and it must return an integer.  The parameters `line' and
  `column' correspond to the line and column numbers in the
  buffer where the event took place. `btn' is an integer that
  corresponds to the button triggering the event.  It can take
  on values `1', `2', and `4' corresponding to the left,
  middle, and right buttons, respectively.  `shift' can take on
  values `0', `1', or `2' where `0' indicates that no modifier
  key was pressed, `1' indicates that the SHIFT key was
  pressed, and `2' indicates that the CTRL key was pressed.
  For more detailed information about the modifier keys, use
  the function `mouse_get_event_info'.

  When the hook is called, the editor will automatically change
  to the window where the event occurred.  The return value of
  the hook is used to dictate whether or not hook handled the
  event or whether the editor should switch back to the window
  prior to the event.  Specifically, the return value is interpreted
  as follows:


          -1     Event not handled, pass to default hook.
           0     Event handled, return active window prior to event
           1     Event handled, stay in current window.


 SEE ALSO
  mouse_get_event_info, mouse_set_current_window, set_buffer_hook

--------------------------------------------------------------

Skip past all word characters

 SYNOPSIS
  bskip_word_chars

 USAGE
  Void bskip_word_chars ()

 DESCRIPTION
  This function moves the current editing point backward past all
  word characters until a non-word character is encountered.
  Characters that make up a word are set by the `define_word' function.

 SEE ALSO
  define_word, skip_word_chars, bskip_chars, bskip_non_word_chars

--------------------------------------------------------------

_get_point

 SYNOPSIS
  Get the current offset from the beginning of the line

 USAGE
  Int_Type _get_point ()

 DESCRIPTION
  The `_get_point' function returns the current character offset
  fro the beginning of the line.

 SEE ALSO
  _set_point, what_column

--------------------------------------------------------------

_set_point

 SYNOPSIS
  Move to a specified offset from the beginning of the line

 USAGE
  _set_point (Int_Type nth)

 DESCRIPTION
  The `_set_point' function moves the current editing position to
  the `nth' character of the current line.

 SEE ALSO
  _get_point, goto_column

--------------------------------------------------------------

backward_paragraph

 SYNOPSIS
  Move backward to a line that is a paragraph separator

 USAGE
  Void backward_paragraph ()

 DESCRIPTION
  This function moves the current editing point backward past the
  current paragraph to the line that is a paragraph separator.  Such a
  line is determined by the S-Lang hook `is_paragraph_separator'.  This
  hook can be modified on a buffer by buffer basis by using the
  function `set_buffer_hook'.

 SEE ALSO
  forward_paragraph, set_buffer_hook

--------------------------------------------------------------

bob

 SYNOPSIS
  Go to the beginning of the buffer

 USAGE
  Void bob ()

 DESCRIPTION
  The function `bob' is used to move the current editing point to the
  beginning of the buffer.  The function `bobp' may be used to determine
  if the editing point is at the beginning of the buffer or not.

 SEE ALSO
  bobp, eob, bol, eol

--------------------------------------------------------------

bol

 SYNOPSIS
  Go to the beginning of the line

 USAGE
  Void bol()

 DESCRIPTION
  This function moves the current editing point to the beginning of the
  current line.  The function `bolp' may be used to see if one is already
  at the beginning of a line.

 SEE ALSO
  eol, bob, eob, bolp

--------------------------------------------------------------

bskip_chars

 SYNOPSIS
  Skip past all characters defined by string "str"

 USAGE
  Void bskip_chars (String str)

 DESCRIPTION
  This function may be used to skip backward past all characters defined by the
  string `str'.  See `skip_chars' for the definition of `str'.
  The following example illustrates how to skip past all whitespace
  including newline characters:

        bskip_chars (" \t\n");


 SEE ALSO
  skip_chars, left

--------------------------------------------------------------

bskip_non_word_chars

 SYNOPSIS
  Skip past all non-word characters

 USAGE
  Void bskip_word_chars ()

 DESCRIPTION
  This function moves the current editing point backward past all
  non-word characters until a word character is encountered.
  Characters that make up a word are set by the `define_word' function.

 SEE ALSO
  define_word, skip_non_word_chars, bskip_chars, bskip_word_chars

--------------------------------------------------------------

down

 SYNOPSIS
  Move the editing point "n" lines down

 USAGE
  Integer down(Integer n)

 DESCRIPTION
  The `down' function is used to move the editing point down a number of
  lines specified by the integer `n'.  It returns the number of lines
  actually moved.  The number returned will be less than `n' only if the
  last line of the buffer has been reached.  The editing point will be
  left at the beginning of the line if it succeeds in going down more
  than one line.
  Example: The function

        define trim_buffer
        {
          bob ();
          do
            {
               eol (); trim ();
            }
          while (down (1));
        }

  removes excess whitespace from the end of every line in the buffer.

 SEE ALSO
  down, left, right, goto_line

--------------------------------------------------------------

eob

 SYNOPSIS
  Move to the end of the buffer

 USAGE
  Void eob()

 DESCRIPTION
  The `eob' function is used to move the current point to the end of the
  buffer.  The function `eobp' may be used to see if the current
  position is at the end of the buffer.

 SEE ALSO
  eobp, bob, bol, eol

--------------------------------------------------------------

eol

 SYNOPSIS
  Go to the end of the line

 USAGE
  Void eol()

 DESCRIPTION
  Moves the current position to the end of the current line.  The function
  `eolp' may be used to see if one is at the end of a line or not.

 SEE ALSO
  eolp, bol, bob, eob

--------------------------------------------------------------

forward_paragraph

 SYNOPSIS
  Go to the end of the current paragraph

 USAGE
  Void forward_paragraph ()

 DESCRIPTION
  This function moves the current editing point forward past the end of
  the current paragraph.  Paragraph delimiters are defined through either
  a buffer hook or via the hook `is_paragraph_separator'.

 SEE ALSO
  backward_paragraph, set_buffer_hook

--------------------------------------------------------------

goto_column

 SYNOPSIS
  Move to the column "n"

 USAGE
  Void goto_column (Integer n)

 DESCRIPTION
  This function moves the current editing point to the column specified
  by the parameter `n'.  It will insert a combination of spaces and tabs
  if necessary to achieve the goal.
  Note: The actual character number offset from the beginning of the
  line depends upon tab settings and the visual expansion of other
  control characters.

 SEE ALSO
  goto_column_best_try, what_column, left, right, goto_line

 SEE ALSO
  TAB,TAB_DEFAULT,DISPLAY_EIGHT_BIT

--------------------------------------------------------------

goto_column_best_try

 SYNOPSIS
  like "goto_column" but don't insert whitespace

 USAGE
  Integer goto_column_best_try (Integer c)

 DESCRIPTION
  This function is like `goto_column' except that it will not insert
  whitespace.  This means that it may fail to achieve the column number
  specified by the argument `c'.  It returns the current column number.

 SEE ALSO
  goto_column, what_column

--------------------------------------------------------------

goto_line

 SYNOPSIS
  Go to line number "n"

 USAGE
  Void goto_line (Integer n)

 DESCRIPTION
  The `goto_line' function may be used to move to a specific line number
  specified by the parameter `n'.
  Note: The actual column that the editing point will be left in is
  indeterminate.

 SEE ALSO
  what_line, goto_column, down, up

--------------------------------------------------------------

left

 SYNOPSIS
  Move the editing point backward "n" characters

 USAGE
  Integer left(Integer n)

 DESCRIPTION
  `left' moves the editing point backward `n' characters and returns the
  number actually moved.  The number returned will be less than `n' only
  if the top of the buffer is reached.

 SEE ALSO
  right, up, down, bol, bob

--------------------------------------------------------------

right

 SYNOPSIS
  Move the editing position forward forward "n" characters

 USAGE
  Integer right(Integer n)

 DESCRIPTION
  This function moves the editing position forward forward `n'
  characters. It returns the number of characters actually moved.  The
  number returned will be smaller than `n' if the end of the buffer is
  reached.

 SEE ALSO
  left, up, down, eol, eob

--------------------------------------------------------------

skip_chars

 SYNOPSIS
  Go forward past all characters defined by "s"

 USAGE
  Void skip_chars(String s)

 DESCRIPTION
  This fnction may be used to move the editing point forward past all
  characters in string `s' which contains the chars to skip, or a range
  of characters.  A character range is denoted by two characters
  separated by a hyphen.  If the first character of the string `s' is a
  `'^'' character, then the list of characters actually denotes the
  complement of the set of characters to be skipped.  To explicitly
  include the hyphen character in the list, it must be either the first
  or the second character of the string, depending upon whether or not
  the `'^'' character is present. So for example,

        skip_chars ("- \t0-9ai-o_");

  will skip the hyphen, space, tab, numerals `0' to `9', the letter `a',
  the letters `i' to `o', and underscore.  An example which illustrates
  the complement of a range is

        skip_chars("^A-Za-z");

  which skips all characters except the letters.
  Note: The backslash character may be used to escape only the first
  character in the string.  That is, `"\\^"' is to be used to skip over
  `^' characters.

 SEE ALSO
  bskip_chars, skip_white

--------------------------------------------------------------

skip_non_word_chars

 SYNOPSIS
  Go forward until a word character is encountered

 USAGE
  Void skip_non_word_chars ()

 DESCRIPTION
  This function moves the current editing point forward past all
  non-word characters until a word character is encountered.
  Characters that make up a word are set by the `define_word' function.

 SEE ALSO
  define_word, skip_word_chars, skip_chars, bskip_non_word_chars

--------------------------------------------------------------

skip_white

 SYNOPSIS
  Go forward until a non-whitespace character or the end of the line

 USAGE
  Void skip_white ()

 DESCRIPTION
  The `skip_white' function moves the current point forward until it
  reaches a non-whitespace character or the end of the current line,
  whichever happens first.  In this context, whitespace is considered to
  be any combination of space and tab characters.  To skip newline
  characters as well, the function `skip_chars' may be used.

 SEE ALSO
  bskip_chars, what_char, trim, right

--------------------------------------------------------------

skip_word_chars

 SYNOPSIS
  Go forward until a non-word character is
  encountered

 USAGE
  Void skip_word_chars ()

 DESCRIPTION
  This function moves the current editing point forward across all
  characters that constitute a word until a non-word character is
  encountered. Characters that make up a word are set by the
  `define_word' function.

 SEE ALSO
  define_word, skip_non_word_chars, skip_chars, bskip_word_chars

--------------------------------------------------------------

up

 SYNOPSIS
  Go up "n" lines

 USAGE
  Integer up(Integer n)

 DESCRIPTION
  This function moves the current point up `n' lines and returns the
  number of lines actually moved.  The number returned will be less than
  `n' only if the top of the buffer is reached.

 SEE ALSO
  down, left, right

--------------------------------------------------------------

get_process_input

 SYNOPSIS
  Read all pending input by all subprocesses

 USAGE
  Void get_process_input (Int_Type tsecs)

 DESCRIPTION
  Read all pending input by all subprocesses.  If no input is
  available, this function will wait for input until `tsecs' tenth of
  seconds have expired.

 SEE ALSO
  open_process, kill_process

--------------------------------------------------------------

get_process_flags

 SYNOPSIS
  Get the flags associated with a process

 USAGE
  Int_Type get_process_flags (Int_Type id)

 DESCRIPTION
  This function returns the flags associated with the current process.
  The `set_process_flags' may be used to set the flags.

 SEE ALSO
  open_process, set_process_flags

--------------------------------------------------------------

kill_process

 SYNOPSIS
  Kill the subprocess specified by the process handle "id"

 USAGE
  Void kill_process (Int_Type id)

 DESCRIPTION
  Kill the subprocess specified by the process handle `id'

 SEE ALSO
  open_process

--------------------------------------------------------------

open_process

 SYNOPSIS
  Open a process and return a unique process id

 USAGE
  Int_Type open_process (name, argv1, argv2, ..., argvN, N)

 DESCRIPTION
  Open subprocess `name'. Returns id of process, -1 upon failure.

 SEE ALSO
  kill_process, process_mark, process_query_at_exit

--------------------------------------------------------------

process_mark

 SYNOPSIS
  Return user mark for the position of the last output by the process

 USAGE
  User_Mark process_mark (Int_Type id)

 DESCRIPTION
  This function returns the user mark that contains the position of the
  last output by the process.

--------------------------------------------------------------

process_query_at_exit

 SYNOPSIS
  Whether or not to silently kill a process at exit

 USAGE
  Void process_query_at_exit (Int_Type pid, Int_Type query)

 DESCRIPTION
  The `process_query_at_exit' may be used to specify whether or
  not the process specified by `pid' should be silently ignored
  when the editor exits.  If the parameter `query' is non-zero,
  the user will be reminded the process exists before exiting.

 SEE ALSO
  open_process, kill_process, exit_jed

--------------------------------------------------------------

run_program

 SYNOPSIS
  Run another program in a window

 USAGE
  Int_Type run_program (String_Type pgm)

 DESCRIPTION
  Like the `system' function, the `run_program' function may
  be used to execute another program.  However, this function is more
  useful for executing interactive programs that require some sort of display
  manipulation, e.g., `lynx', the text-mode web browser.  When
  called from `xjed', the other program is executed asynchronously
  in a separate xterm window.  If the editor is running in an ordinary
  terminal, `jed' will be suspended while the other program runs.
  The function returns the exit value of the invoked process.

 EXAMPLE

     if (0 != run_program ("lynx http://www.jedsoft.org"))
       error ("lynx failed to run");


 NOTES
  The `XTerm_Pgm' variable may be used to specify the terminal
  that `xjed' uses when calling `run_program'.  For example,
  to use `rxvt', use:

     variable XTerm_Pgm = "rxvt";


 SEE ALSO
  system, open_process

--------------------------------------------------------------

run_shell_cmd

 SYNOPSIS
  Run "cmd" in a separate process

 USAGE
  Integer_Type run_shell_cmd (String cmd)

 DESCRIPTION
  The `run_shell_cmd' function may be used to run `cmd' in a separate
  process.  Any output generated by the process is inserted into the
  buffer at the current point.  It generates a S-Lang error if the
  process specified by `cmd' could not be opened.  Otherwise, it
  returns the exit status of the process.

--------------------------------------------------------------

send_process

 SYNOPSIS
  Send a string to the specified subprocess

 USAGE
  Void send_process (Int_Type id, String s)

 DESCRIPTION
 This function sends the string `s' to the standard input of the
 process with the ID `id'.  With this function and
 `set_process' with the argument `output'' you can establish a
 bi-directional communication with the process.

 SEE ALSO
  open_process, set_process, send_process_eof

--------------------------------------------------------------

send_process_eof

 SYNOPSIS
  Close the "stdin" of the process "id"

 USAGE
  send_process_eof (Int_Type id)

 DESCRIPTION
  This function closes the `stdin' of the process specified by the
  handle `id'.

--------------------------------------------------------------

set_process

 SYNOPSIS
  Set "what" for process "pid"

 USAGE
  Void set_process (pid, what, value)

   Int_Type pid;
   String_Type what;
   String_Type or Ref_Type value;


 DESCRIPTION
  `pid' is the process handle returned by `open_process'.  The second
  parameter, `what', specifies what to set.  It must be one of the
  strings:

        "signal" :  indicates that 'value' is the name of a function to call
                    when the process status changed.  The function specified
                    by 'value' must be declared to accept an argument list:
                    (pid, flags, status) where 'pid' has the same
                    meaning as above and flags is an integer with the
                    meanings:
                      1: Process Running
                      2: Process Stopped
                      4: Process Exited Normally
                      8: Process Exited via Signal
                    The meaning of the status parameter depends
                    upon the flags parameter.  If the process
                    exited normally, then status indicates its
                    return status.  Otherwise status represents
                    the signal that either stopped or killed the
                    process.
                    Note: when this function is called, the current buffer is
                    guaranteed to be the buffer associated with the process.

       "output" :   This parameter determines how output from the process is
                    is processed.  If the 'value' is the empty string "", output
                    will go to the end of the buffer associated with the process
                    and the point will be left there.
                    If value is ".", output will go at the current buffer position.
                    If value is "@", output will go to the end of the buffer but
                    the point will not move.  Otherwise, 'value' is
                    the name or a reference to a slang function that
                    takes arguments: (pid, data) where pid has
                    the above meaning and data is the output from the process.

  Normally jed automatically switches to the buffer associated with
  the process prior to handling data from the process.  This behavior
  may be modified through the use of the `set_process_flags'
  function.

 SEE ALSO
  set_process_flags, get_process_flags, open_process

--------------------------------------------------------------

set_process_flags

 SYNOPSIS
  Set the flags associated with a process

 USAGE
  set_process_flags (Int_Type id, Int_Type flags)

 DESCRIPTION
  This function may be used to set the flags associated with the
  specified process.  The flags may be used to affect the behavior of
  the process.  Currently the following bits are defined:

     0x01     Do not switch to the process buffer prior to calling any
                hooks associated with the buffer including output from
                the process.


 SEE ALSO
  open_process, get_process_flags, set_process

--------------------------------------------------------------

signal_process

 SYNOPSIS
  Send a signal to the process "pid"

 USAGE
  Void signal_process (Int_Type pid, Int_Type signum)

 DESCRIPTION
  This function may be used to send a signal to the process whose
  process handle is given by `pid'.  The `pid' must be a valid handle
  that was returned by `open_process'.

 SEE ALSO
  open_process, kill_process, send_process_eof

--------------------------------------------------------------

Replace all text in the rectangle by spaces

 SYNOPSIS
  Replace the rectangle defined by point and mark with spaces

 USAGE
  Void blank_rect ()

 DESCRIPTION
   The `blank_rect' function replaces all text in the rectangle defined by
  the current editing point and the mark by spaces.

 SEE ALSO
  push_mark, kill_rect, insert_rect, copy_rect

--------------------------------------------------------------

copy_rect

 SYNOPSIS
  Copy the contents of the rectangle to the rectangle buffer

 USAGE
  Void copy_rect ()

 DESCRIPTION
  The `copy_rect' function is used to copy the contents of the
  currently defined rectangle to the rectangle buffer.  It overwrites
  the previous contents of the rectangle buffer.  A rectangle is defined
  by the diagonal formed by the mark and the current point.

 SEE ALSO
  insert_rect, kill_rect, blank_rect

--------------------------------------------------------------

insert_rect

 SYNOPSIS
  Insert the contents of the rectangle buffer

 USAGE
  insert_rect ()

 DESCRIPTION
  The `insert_rect' function inserts the contents of the rectangle buffer
  at the current editing point.  The rectangle buffer is not modified.
  Any text that the rectangle would overwrite is moved to the right by an
  amount that is equal to the width of the rectangle.

 SEE ALSO
  kill_rect, blank_rect, copy_rect

--------------------------------------------------------------

kill_rect

 SYNOPSIS
  Delete the rectangle and place a copy in the rectangle buffer

 USAGE
  Void kill_rect ()

 DESCRIPTION
  This function deletes the rectangle defined by the mark and the current
  point.  The contents of the rectangle are saved in the rectangle buffer
  for later retrieval via the `insert_rect' function.  The previous
  contents of the rectangle buffer will be lost.

 SEE ALSO
  insert_rect, blank_rect, copy_rect

--------------------------------------------------------------

open_rect

 SYNOPSIS
  Insert a blank rectangle determined by mark and point

 USAGE
  Void open_rect ()

 DESCRIPTION
  The `open_rect' function may be used to insert a blank rectangle whose
  size is determined by the mark and the current editing point.  Any text
  that lies in the region of the rectangle will be pushed to the right.

 SEE ALSO
  insert_rect, kill_rect, copy_rect

--------------------------------------------------------------

KILL_ARRAY_SIZE

 SYNOPSIS
  The size of the internal kill buffer array

 USAGE
  Int_Type KILL_ARRAY_SIZE

 DESCRIPTION
 This variable contains the value of the size of the internal kill
 array of character strings.  Any number from zero up to but not
 including the value of `KILL_ARRAY_SIZE' may be used as an
 argument in the functions that manipulate this array.

 NOTES
 This variable is a read-only variable and may not available on 16
 bit systems.

 SEE ALSO
  insert_from_kill_array, copy_region_to_kill_array, append_region_to_kill_array

--------------------------------------------------------------

append_region_to_file

 SYNOPSIS
  Append the region to "file"

 USAGE
  Integer append_region_to_file (String file)

 DESCRIPTION
  Appends a marked region to `file' returning number of lines
  written or -1 on error.  This does NOT modify a buffer visiting the
  file; however, it does flag the buffer as being changed on disk.

--------------------------------------------------------------

append_region_to_kill_array

 SYNOPSIS
  Append the region to the element "n" of the kill array

 USAGE
  Void append_region_to_kill_array (Integer n)

 DESCRIPTION
  This function appends the currently defined region to the contents of
  nth element, specified by `n', of an internal array of character strings.

  Note: This function is not available on 16 bit systems.

 SEE ALSO
  insert_from_kill_array, copy_region_to_kill_array

 SEE ALSO
  KILL_ARRAY_SIZE

--------------------------------------------------------------

bufsubstr

 SYNOPSIS
  Return the region as a string

 USAGE
  String bufsubstr ()

 DESCRIPTION
  This function returns a string that contains the characters in the
  region specified by a mark and the current editing point.
  If the region crosses lines, the string will contain newline
  characters.

 SEE ALSO
  insbuf, push_mark

--------------------------------------------------------------

check_region

 SYNOPSIS
  Test if a region is defined and ensure the mark comes before point

 USAGE
  Void check_region (Integer ps)

 DESCRIPTION
  This function checks to see if a region is defined and may exchange
  the current editing point and the mark to define a canonical region.
  If the mark is not set, it signals an S-Lang error.  A canonical
  region is one with the mark set earlier in the buffer than than the
  editing point.  Always call this if using a region which requires
  such a situation.

  If the argument `ps' is non-zero, `push_spot' will be called,
  otherwise, `ps' is zero and it will not be called.

  As an example, the following function counts the number of lines in
  a region:

        define count_lines_region ()
        {
           variable n;
           check_region (1);   % spot pushed
           narrow ();
           n = what_line ();
           widen ();
           pop_spot ();
           return n;
         }


 SEE ALSO
  markp, push_mark

--------------------------------------------------------------

copy_region

 SYNOPSIS
  copy a region to the buffer "buf"

 USAGE
  Void copy_region (String buf)

 DESCRIPTION
  This function may be used to copy a region defined by a mark and the
  current position to the buffered specified by the name `buf'. It does
  not delete the characters in region but it does pop the mark that
  determines the region.

 SEE ALSO
  insbuf, bufsubstr, push_mark, pop_mark, bufferp

--------------------------------------------------------------

copy_region_to_kill_array

 SYNOPSIS
  Copy the defined region to element "n" of the kill array

 USAGE
  Void copy_region_to_kill_array (Integer n)

 DESCRIPTION
  This function copies the currently defined region to the nth element,
  specified by `n', of an internal array of character strings replacing
  what is currently there.

  Note: This function is not available on 16 bit systems.

 SEE ALSO
  insert_from_kill_array, append_region_kill_array

 SEE ALSO
  KILL_ARRAY_SIZE

--------------------------------------------------------------

count_narrows

 SYNOPSIS
  Return the narrow depth of the current buffer

 USAGE
  Integer count_narrows ()

 DESCRIPTION
  This function returns the narrow depth of the current buffer.

 SEE ALSO
  narrow, widen, widen_buffer, push_narrow

--------------------------------------------------------------

narrow

 SYNOPSIS
  Restrict editing to the region (complete lines)

 USAGE
  Void narrow ()

 DESCRIPTION
  This function may be used to restict editing to the region of lines
  between the mark and the editing point.  The region includes the line
  containing the mark as well as the line at the current point. All
  other lines outside this region are completely inacessible without
  first lifting the restriction using the `widen' function. As a simple
  example, suppose that there is a function called `print_buffer' that
  operates on the entire buffer.  Then the following function will work
  on a region of lines:

        define print_region ()
        {
           narrow ();
           print_buffer ();
           widen ();
        }

  The `narrow' function will signal an error if the mark is not set.
  Note also that the narrow function may be used recursively in the
  sense that a narrowed region may be further restricted using the
  `narrow' function.  For each narrow, the `widen' function must be called
  to lift each restriction.

 SEE ALSO
  widen, narrow_to_region

--------------------------------------------------------------

narrow_to_region

 SYNOPSIS
  Restrict editing exactly to the region

 USAGE
  Void narrow_to_region (void)

 DESCRIPTION
  The `narrow_to_region' function behaves like the `narrow' function
  that `narrow' operates on lines and `narrow_to_region' restricts
  editing to only characters within the region.

 SEE ALSO
  widen_region, narrow.

--------------------------------------------------------------

pipe_region

 SYNOPSIS
  Execute "cmd" as subprocess and sends the region to its stdin

 USAGE
  Integer pipe_region (String cmd)

 DESCRIPTION
  The `pipe_region' function executes `cmd' in a separate process and
  sends the region of characters defined by the mark and the current
  point to the standard input of the process.  It successful, it returns
  the exit status of the process.  Upon failure it signals an error.
  Note: This function is only available for Unix and OS/2 systems.

 SEE ALSO
  run_shell_cmd, push_mark

--------------------------------------------------------------

pop_narrow

 SYNOPSIS
  restore the last narrow context

 USAGE
  Void pop_narrow ()

 DESCRIPTION
  The purpose of this function is to restore the last narrow
  context that was saved via `push_narrow'.

 SEE ALSO
  push_narrow, widen, widen_buffer

--------------------------------------------------------------

push_narrow

 SYNOPSIS
  Save the current narrow context

 USAGE
  Void push_narrow ()

 DESCRIPTION
  This function saves the current narrow context.  This is useful when
  one wants to restore this context after widening the buffer.

 SEE ALSO
  pop_narrow, narrow, widen, widen_buffer

--------------------------------------------------------------

translate_region

 SYNOPSIS
  translate the characters in the region according to "a"

 USAGE
  Void translate_region (String_Type[256] a)

 DESCRIPTION
  This function uses the 256 element array of strings to translate the
  characters in a region based on the mapping defined by the array.
  If an array element is `NULL', then the corresponding character
  will not be replaced.

  The `translate_region' function leaves the editing point at the
  end of the region.

 EXAMPLE

    variable a = String_Type[256];
    a['&'] = "&amp;";
    a['<'] = "&lt;";
    a['>'] = "&gt;";
    a['$'] = "&dollar;";
    bob (); push_mark (); eob ();
    translate_region (a);

  uses `translate_region' to replace the characters `'&'',
  `'<'', `'>'', and `'$'' by the strings
  `"&amp;"', `"&lt;"', `"&gt;"', and `"&dollar;"',
  respectively.

 SEE ALSO
  insert, delete, what_char, replace

--------------------------------------------------------------

widen

 SYNOPSIS
  Undo the effect of "narrow"

 USAGE
  Void widen ()

 DESCRIPTION
  This function undoes the effect of `narrow'.  Consult the documentation
  for `narrow' for more information.

 SEE ALSO
  widen_region, narrow

--------------------------------------------------------------

widen_buffer

 SYNOPSIS
  Widen the whole buffer

 USAGE
  Void widen_buffer ()

 DESCRIPTION
  This function widens the whole buffer.  If one intends to restore the
  narrow context after calling this function, the narrow context should be
  saved via `push_narrow'.

 SEE ALSO
  narrow, widen, push_narrow, pop_narrow

--------------------------------------------------------------

widen_region

 SYNOPSIS
  Undo the effect of "narrow_to_region"

 USAGE
  Void widen_region ()

 DESCRIPTION
  This function undoes the effect of `narrow_to_region'.  Consult the
  documentation for `narrow_to_region' for more information.

 SEE ALSO
  widen, narrow_to_region

--------------------------------------------------------------

write_region_to_file

 SYNOPSIS
  Write the region to the file "filename"

 USAGE
  Integer write_region_to_file (String filename)

 DESCRIPTION
  This function may be used to write a region of the current buffer to
  the file specified by `filename'.  It returns the number of lines
  written to the file or signals an error upon failure.

 SEE ALSO
  write_buffer, append_region_to_file, push_mark

--------------------------------------------------------------

xform_region

 SYNOPSIS
  Change the characters in the region according to "how"

 USAGE
  Void xform_region (Integer how)

 DESCRIPTION
  This function changes the characters in the region in a way specified
  by the parameter `how'.  This is an integer that can be any of of the
  following:

        'u'       Upcase_region
        'd'       Downcase_region
        'c'       Capitalize region

  Anything else will change case of region.

 SEE ALSO
  translate_region, define_case

--------------------------------------------------------------

CASE_SEARCH

 SYNOPSIS
  Control the case-sensitivity for searches in the current buffer

 USAGE
  Int_Type CASE_SEARCH

 DESCRIPTION
 If the value of `CASE_SEARCH' is non-zero, text searches
 performed in the current buffer will be case-sensitive, otherwise
 case-insensitive searches will be performed.  The value of this
 variable may vary from buffer to buffer.

 SEE ALSO
  CASE_SEARCH_DEFAULT, fsearch, ffind

--------------------------------------------------------------

CASE_SEARCH_DEFAULT

 SYNOPSIS
  The default CASE_SEARCH setting for newly created buffers

 USAGE
  Int_Type CASE_SEARCH_DEFAULT

 DESCRIPTION
 Searches in a buffer are performed according to the value of the
 `CASE_SEARCH' variable.  Newly created buffers are given a
 `CASE_SEARCH' value of `CASE_SEARCH_DEFAULT'.  The default
 value of `CASE_SEARCH_DEFAULT' is 0.

 SEE ALSO
  CASE_SEARCH, fsearch, ffind

--------------------------------------------------------------

bfind

 SYNOPSIS
  Search backward to the beginning of the line

 USAGE
  Integer bfind (String str)

 DESCRIPTION
  `bfind' searches backward from the current position to the beginning
  of the line for the string `str'.  If a match is found, the length of
  `str' is returned and the current point is moved to the start of the
  match. If no match is found, zero is returned.
  Note: This function respects the setting of the `CASE_SEARCH' variable.

 SEE ALSO
  bsearch, ffind, bol_bsearch, re_bsearch

 SEE ALSO
  CASE_SEARCH

--------------------------------------------------------------

bfind_char

 SYNOPSIS
  Search backward on the current line for a character

 USAGE
  Integer fsearch_char (Integer ch)

 DESCRIPTION
  This function searches backward on the current line for a character
  `ch'.  If it is found, `1' is returned; otherwise `0' is returned.

 SEE ALSO
  fsearch_char, ffind_char, fsearch

 SEE ALSO
  CASE_SEARCH

--------------------------------------------------------------

blooking_at

 SYNOPSIS
  Test if the characters immediately preceding the point match a string

 USAGE
  Int_Type blooking_at (String_Type str)

 DESCRIPTION
  This function returns non-zero if the characters immediately preceding
  the current editing point match the string specified by `str'.  Whether
  the match is case-sensitive or not depends upon the value of the
  variable `CASE_SEARCH'.  The function returns a non-zero value
  if there is a match; otherwise zero will be returned to indicated no
  match.

 SEE ALSO
  ffind, fsearch, re_fsearch, bfind, looking_at, re_looking_at

--------------------------------------------------------------

bol_bsearch

 SYNOPSIS
  Search backward for "str" at the beginning of a line

 USAGE
  Integer bol_bsearch (str)

 DESCRIPTION
  `bol_bsearch' searches backward from the current point until the
  beginning of the buffer for the occurrences of the string `str' at
  the beginning of a line.  If a match is found, the length of `str' is
  returned and the current point is moved to the start of the match. If
  no match is found, zero is returned.

  Note: `bol_bsearch' is much faster than using `re_bsearch' to perform
  a search that matches the beginning of a line.

 SEE ALSO
  bol_fsearch, bsearch, bfind, re_bsearch

 SEE ALSO
  CASE_SEARCH

--------------------------------------------------------------

bol_bsearch_char

 SYNOPSIS
  Search backward for character "ch" at the beginning of a line

 USAGE
  Integer bol_fsearch_char (Integer ch)

 DESCRIPTION
  This function searches backward for a character `ch' at the beginning
  of a line.  If it is found, `1' is returned; otherwise `0' is returned.

 SEE ALSO
  bol_bsearch, bol_fsearch_char, bsearch_char

 SEE ALSO
  CASE_SEARCH

--------------------------------------------------------------

bol_fsearch

 SYNOPSIS
  Search forward for "str" at the beginning of a line

 USAGE
  Integer bol_fsearch (str)

 DESCRIPTION
  `bol_fsearch' searches forward from the current point until the end
  of the buffer for occurrences of the string `str' at the beginning of
  a line.  If a match is found, the length of `str' is returned and the
  current point is moved to the start of the match.  If no match is
  found, zero is returned.
  Note: `bol_fsearch' is much faster than using `re_fsearch' to perform
  a search that matches the beginning of a line.

 SEE ALSO
  bol_bsearch, fsearch, ffind, re_fsearch

 SEE ALSO
  CASE_SEARCH

--------------------------------------------------------------

bol_fsearch_char

 SYNOPSIS
  Search forward for character "ch" at the beginning of a line

 USAGE
  Integer bol_fsearch_char (Integer ch)

 DESCRIPTION
  This function searches forward for a character `ch' at the beginning
  of a line.  If it is found, `1' is returned; otherwise `0' is returned.

 SEE ALSO
  bol_fsearch, bol_bsearch_char, fsearch_char

 SEE ALSO
  CASE_SEARCH

--------------------------------------------------------------

bsearch

 SYNOPSIS
  Search backward for "str"

 USAGE
  Integer bsearch (String str)

 DESCRIPTION
  The `bsearch' function searches backward from the current position
  for the string `str'.  If `str' is found, this function will return
  the length of `str' and move the current position to the beginning of
  the matched text.  If a match is not found, zero will be returned and
  the position will not change.  It respects the value of the variable
  `CASE_SEARCH'.

 SEE ALSO
  fsearch, bol_bsearch, re_bsearch

--------------------------------------------------------------

bsearch_char

 SYNOPSIS
  Search backward for a character

 USAGE
  Integer bsearch_char (Integer ch)

 DESCRIPTION
  This function searches backward for a character `ch'.  If it is
  found, `1' is returned; otherwise `0' is returned.

 SEE ALSO
  fsearch_char, ffind_char, fsearch

 SEE ALSO
  CASE_SEARCH

--------------------------------------------------------------

ffind

 SYNOPSIS
  Search forward to the end of the line for the string "str"

 USAGE
  Integer ffind (String s)

 DESCRIPTION
  `ffind' searches forward from the current position to the end of the
  line for the string `str'.  If a match is found, the length of `str'
  is returned and the current point is moved to the start of the match.
  If no match is found, zero is returned.
  Note: This function respects the setting of the `CASE_SEARCH' variable.
  To perform a search that includes multiple lines, use the `fsearch'
  function.

 SEE ALSO
  fsearch, bfind, re_fsearch, bol_fsearch

--------------------------------------------------------------

ffind_char

 SYNOPSIS
  Search forward on the current line for character "ch"

 USAGE
  Integer ffind_char (Integer ch)

 DESCRIPTION
  This function searches forward on the current line for the character
  `ch'.  If it is found, `1' is returned; otherwise `0'
  is returned.

 SEE ALSO
  fsearch_char, bfind_char, fsearch

 SEE ALSO
  CASE_SEARCH

--------------------------------------------------------------

find_matching_delimiter

 SYNOPSIS
  Look for the delimiter that matches "ch"

 USAGE
  Integer find_matching_delimiter (Integer ch)

 DESCRIPTION
  This function scans either forward or backward looking for the
  delimiter that matches the character specified by `ch'.  The actual
  direction depends upon the syntax of the character `ch'.  The
  matching delimiter pair must be declared as such by a prior call to
  `define_syntax'.  This function returns one of the following values:

         1    Match found
         0    Match not found
        -1    A match was attempted from within a string.
        -2    A match was attempted from within a comment
         2    No information

  In addition, the current point is left either at the match or is left
  at the place where the routine either detected a mismatch or gave up.
  In the case of a comment or a string (return values of -2 or -1), the
  current point is left at the beginning of a comment.
  Note: If the of `ch' is zero, the character at the current point will be
  used.

 SEE ALSO
  blink_match, create_syntax_table, define_syntax, parse_to_point

--------------------------------------------------------------

fsearch

 SYNOPSIS
  Search forward for the string "str"

 USAGE
  Integer fsearch (String str)

 DESCRIPTION
  This function may be used to search forward in buffer looking for the
  string `str'.  If not found, this functions returns zero.  However,
  if found, the length of the string is returned and the current point
  is moved to the to the start of the match.  It respects the setting
  of the variable `CASE_SEARCH'.  If the string that one is searching
  for is known to be at the beginning of a line, the function
  `bol_fsearch' should be used instead.

  Note: This function cannot find a match that crosses lines.

 SEE ALSO
  ffind, fsearch_char, bsearch, bol_fsearch, re_fsearch, looking_at

 SEE ALSO
  CASE_SEARCH

--------------------------------------------------------------

fsearch_char

 SYNOPSIS
  Search forward for a character

 USAGE
  Integer fsearch_char (Integer ch)

 DESCRIPTION
  This function searches forward for the character `ch'.  If it is
  found, `1' is returned; otherwise `0' is returned.

 SEE ALSO
  fsearch, ffind_char, bsearch_char

 SEE ALSO
  CASE_SEARCH

--------------------------------------------------------------

looking_at

 SYNOPSIS
  Test if the characters immediately following the point match "s"

 USAGE
  Integer looking_at (String s)

 DESCRIPTION
  This function returns non-zero if the characters immediately following
  the current editing point match the string specified by `s'.  Whether
  the match is case-sensitive or not depends upon the value of the
  variable `CASE_SEARCH'.  The function returns zero if there is no match.

 SEE ALSO
  ffind, fsearch, re_fsearch, bfind

--------------------------------------------------------------

re_bsearch

 SYNOPSIS
  Search backward for regular expression "pattern"

 USAGE
  Integer re_bsearch(String pattern)

 DESCRIPTION
  Search backward for regular expression `pattern'.  This function returns
  the 1 + length of the string  matched.  If no match is found, it returns
  0.

 SEE ALSO
  bsearch, bol_bsearch, re_fsearch

--------------------------------------------------------------

re_fsearch

 SYNOPSIS
  Search forward for regular expression "pattern"

 USAGE
  Integer re_fsearch(String pattern)

 DESCRIPTION
  Search forward for regular expression `pattern'.  This function returns
  the 1 + length of the string  matched.  If no match is found, it returns
  0.

 SEE ALSO
  fsearch, bol_fsearch, re_bsearch

--------------------------------------------------------------

regexp_nth_match

 SYNOPSIS
  Return the nth sub-expression from the last re search

 USAGE
  String regexp_nth_match (Integer n)

 DESCRIPTION
  This function returns the nth sub-expression matched by the last regular
  expression search.  If the parameter `n' is zero, the entire match is
  returned.
  Note: The value returned by this function is meaningful only if the
  editing point has not been moved since the match.

 SEE ALSO
  re_fsearch, re_bsearch

--------------------------------------------------------------

replace

 SYNOPSIS
  Replace all occurances of "old" with "new"

 USAGE
  Void replace(String old, String new)

 DESCRIPTION
  This function may be used to replace all occurrences of the string
  `old' with the string, `new', from current editing point to the end
  of the buffer. The editing point is returned to the initial location.
  That is, this function does not move the editing point.

 SEE ALSO
  replace_chars, fsearch, re_fsearch, bsearch, ffind, del

 SEE ALSO
  REPLACE_PRESERVE_CASE

--------------------------------------------------------------

replace_chars

 SYNOPSIS
  Replace the next "n" characters with another string

 USAGE
  Int_Type replace_chars (Int_Type n, String_Type new)

 DESCRIPTION
  This function may be used to replace the next `n' characters at the
  editing position by the string `new'.  After the replacement, the editing
  point will be moved to the end of the inserted string.  The length of
  the replacement string `new' is returned.

 SEE ALSO
  fsearch, re_fsearch, bsearch, ffind, del

 SEE ALSO
  REPLACE_PRESERVE_CASE

--------------------------------------------------------------

replace_match

 SYNOPSIS
  Replace text previously matched with "re_fsearch" or "re_bsearch"

 USAGE
  Int_Type replace_match(String_Type str, Int_Type method)

 DESCRIPTION
  This function replaces text previously matched with `re_fsearch'
  or `re_bsearch' at the current editing point with string
  `str'.  If `method' is zero, `str' is a specially formatted
  string of the form described below. If `method' is non-zero,
  `str' is regarded as a simple string and is used literally.  If
  the replacement fails, this function returns zero otherwise, it
  returns a non-zero value.

 NOTES
  This function should be used at the position of the corresponding
  match and nowhere else.

--------------------------------------------------------------

search_file

 SYNOPSIS
  Regular expression search for strings in a disk file

 USAGE
  Integer search_file (String filename, String re, Integer nmax)

 DESCRIPTION
  This function may be used to search for strings in a disk file
  matching the regular expression `re'.  The first argument `filename'
  specifies which file to search.  The last argument `nmax' specifies
  how many matches to return.  Each line that is matched is pushed onto
  the S-Lang stack.  The number of matches (limited by `nmax') is returned.
  If the file contains no matches, zero is returned.

--------------------------------------------------------------

create_syntax_table

 SYNOPSIS
  Create a new syntax table "name"

 USAGE
  Void create_syntax_table (String name);

 DESCRIPTION
  This the purpose of this function is to create a new syntax table
  with the name specified by `name'.  If the table already exists,
  this clears the table of its current syntax entries.

 SEE ALSO
  define_syntax, use_syntax_table, define_keywords, what_syntax_table

--------------------------------------------------------------

define_keywords_n

 SYNOPSIS
  Define a set of keywords

 USAGE
  String define_keywords_n (String table, String kws, Integer len, Integer N);

 DESCRIPTION
  This function is used to define a set of keywords for the syntax
  table `table' to be color syntax highlighted in the
  `"keywordN"' color,  The first parameter, `table', specifies which
  syntax table is to be used for the definition. The second parameter,
  `kws', is a string that is the concatenation of keywords of length
  specified by the last parameter `len'.  The list of keywords specified
  by `kws' must be in alphabetic order.  The function returns the
  previous list of keywords of length `len'. For example, C mode uses
  the statement

        () = define_keywords_n ("C", "asmforintnewtry", 3, 0);

  to define the four three-letter keywords `asm', `for',
  `int', `new', and `try' to be given the
  `"keyword0"' color.  Note that in the above example, the return
  value is not used.

 SEE ALSO
  define_syntax, set_color

 SEE ALSO
  WANT_SYNTAX_HIGHLIGHT,USE_ANSI_COLORS

--------------------------------------------------------------

define_syntax

 SYNOPSIS
  Add a syntax entry to the table "name"

 USAGE
  Void define_syntax (..., Integer type, String name);

 DESCRIPTION
  This function adds a syntax entry to the table specified by the last
  parameter `name'.  The actual number of parameters vary according to
  the next to the last parameter `type'.

  If `type' is `'"'' or `'\''', a string or character delimiter syntax is
  defined. In this case, `define_syntax' only takes three parameters
  where the first parameter is an integer that represents the character
  for which the syntax is to be applied.

  Similarly, if `type' is `'\\'', then a quote syntax is defined and
  again `define_syntax' only takes three parameters where the first
  parameter is an integer that represents the character for which the
  syntax is to be applied.  A quote character is one in which the
  syntax of the following character is not treated as special.

  If `type' is `'('', then `define_syntax' takes four parameters where
  the first two parameters are strings that represent a matching set of
  delimiters.  The first string contains the set of opening delimiters
  and the second string specifies the set of closing delimiters that
  match the first set.  If a character from the closing set is entered
  into the buffer, the corresponding delimiter from the opening set
  will be blinked.  For example, if the C language syntax table is
  called `"C"', then one would use

        define_syntax ("([{", ")]}", '(', "C");

  to declare the matching delimiter set.  Note that the order of the
  characters in the two strings must correspond.  That is, the above
  example says that `'('' matches `')'' and so on.

  If `type' is `'%'', a comment syntax is defined.  As in the
  previous case, `define_syntax' takes four parameters where there
  first two parameters are strings that represent the begin and end
  comment delimiters.  If the comment syntax is such that the comment
  ends at the end of a line, the second string must either be the
  empty string, `""', or a newline `"\n"'.  The current
  implementation supports at most two such types of comments.

  If `type' is `'+'', the first parameter is a string whose characters
  are given the operator syntax.  If type is `','', the first parameter
  is a string composed of characters that are considered to be
  delimiters.  If type is '0', the first parameter is a string composed
  of characters that make up a number.

  If `type' is `<', the first parameter is a string whose successive
  characters form begin and end keyword highlight directives.

  Finally, if `type' is `'#'', the first parameter is an integer whose
  value corresponds to the character used to begin preprocessor lines.

  As an example, imagine a language in which the dollar sign character
  `$' is used as a string delimiter, the backward quote character ``'
  is used as a quote character, comments begin with a semi-colon and
  end at the end of a line, and the characters `'<'' and `'>'' form
  matching delimiters.  The one might use

        create_syntax_table ("strange");
        define_syntax ('$',        '"',  "strange");
        define_syntax ('`',        '\\', "strange");
        define_syntax (";", "",    '%',  "strange");
        define_syntax ("<", ">",   '(',  "strange");

  to create a syntax table called `"strange"' and define the
  syntax entries for appropriate this example.

 SEE ALSO
  create_syntax_table, use_syntax_table, find_matching_delimiter

 SEE ALSO
  BLINK

--------------------------------------------------------------

dfa_build_highlight_table

 SYNOPSIS
  Build a DFA table for the syntax table "n"

 USAGE
  Void dfa_build_highlight_table (String n);

 DESCRIPTION
  This function builds a DFA table for the enhanced syntax
  highlighting scheme specified for the syntax table specified
  by the name `n'. This must be called before any syntax
  highlighting will be done for that syntax table.

 SEE ALSO
  create_syntax_table, use_syntax_table, dfa_define_highlight_rule, dfa_enable_highlight_cache

 SEE ALSO
  WANT_SYNTAX_HIGHLIGHT, USE_ANSI_COLORS

--------------------------------------------------------------

dfa_define_highlight_rule

 SYNOPSIS
  Add an DFA rule to the syntax table "n"

 USAGE
  Void dfa_define_highlight_rule (String rule, String color, String n);

 DESCRIPTION
  This function adds an enhanced highlighting rule to the
  syntax table specified by the name `n'. The rule is described
  as a regular expression by the string `rule', and the
  associated color is given by the string `color', in the same
  format as is passed to `set_color'. For example:

        create_syntax_table ("demo");
        dfa_define_highlight_rule ("[A-Za-z][A-Za-z0-9]*", "keyword", "demo");
        dfa_define_highlight_rule ("//.*$", "comment", "demo");
        dfa_build_highlight_table ("demo");

  causes a syntax table to be defined in which any string of
  alphanumeric characters beginning with an alphabetic is
  highlighted in keyword color, and anything after "//" on a
  line is highlighted in comment color.

  The regular expression syntax understands character classes
  like `[a-z]' and `[^a-z0-9]', parentheses, `+', `*', `?', `|'
  and `.'. Any metacharacter can be escaped using a backslash
  so that it can be used as a normal character, but beware that
  due to the syntax of S-Lang strings the backslash has to be
  doubled when specified as a string constant. For example:

        dfa_define_highlight_rule ("^[ \t]*\\*+[ \t].*$", "comment", "C");

  defines any line beginning with optional whitespace, then one
  or more asterisks, then more whitespace to be a comment. Note
  the doubled backslash before the `*'.

  Note also that `dfa_build_highlight_table' must be called before
  the syntax highlighting can take effect.

 SEE ALSO
  create_syntax_table, use_syntax_table, dfa_build_highlight_table

 SEE ALSO
  WANT_SYNTAX_HIGHLIGHT, USE_ANSI_COLORS

--------------------------------------------------------------

dfa_enable_highlight_cache

 SYNOPSIS
  Enable caching of the DFA table

 USAGE
  Void dfa_enable_highlight_cache (String file, String n);

 DESCRIPTION
  This function enables caching of the DFA table for the
  enhanced syntax highlighting scheme belonging to the syntax
  table specified by the name `n'. This should be called before
  any calls to `dfa_define_highlight_rule' or to
  `dfa_build_highlight_table'. The parameter `file'
  specifies the name of the file (stored in the directory set by the
  `set_highlight_cache_dir' function) which should be used as a cache.

  For example, in `cmode.sl' one might write

        dfa_enable_highlight_cache ("cmode.dfa", "C");

  to enable caching of the DFA. If caching were not enabled for
  C mode, the DFA would take possibly a couple of seconds to
  compute every time Jed was started.

  Transferring cache files between different computers is
  theoretically possible but not recommended. Transferring them
  between different versions of Jed is not guaranteed to work.

 SEE ALSO
  create_syntax_table, use_syntax_table, dfa_define_highlight_rule, dfa_build_highlight_table

 SEE ALSO
  WANT_SYNTAX_HIGHLIGHT, USE_ANSI_COLORS

--------------------------------------------------------------

dfa_set_init_callback

 SYNOPSIS
  Set a callback to initialize a DFA syntax table

 USAGE
  Void dfa_set_init_callback (Ref_Type func, String_Type tbl)

 DESCRIPTION
  This function defines a callback function `func' that will be
  used to build a DFA syntax table for the syntax table `tbl'.
  When the `use_dfa_syntax' function is called to enable syntax
  highlighting, the callback function `func' will be called to to
  create the specified syntax table if it does not already exist.

 SEE ALSO
  create_syntax_table, use_syntax_table, dfa_define_highlight_rule, dfa_enable_highlight_cache

 SEE ALSO
  WANT_SYNTAX_HIGHLIGHT, USE_ANSI_COLORS

--------------------------------------------------------------

parse_to_point

 SYNOPSIS
  Attempt to determine the syntactic context of the point

 USAGE
  Integer parse_to_point ();

 DESCRIPTION
  This function attempts to determine the syntactic context of the
  current editing point.  That is, it tries to determine whether or not
  the current point is in a comment, a string, or elsewhere.
  It returns:

        -2   In a comment
        -1   In a string or a character
         0   Neither of the above

  Note: This routine is rather simplistic since it makes the assumption
  that the character at the beginning of the current line is not in a
  comment nor is in a string.

 SEE ALSO
  define_syntax, find_matching_delimiter

--------------------------------------------------------------

set_fortran_comment_chars

 SYNOPSIS
  Specify characters for fortran-like comments

 USAGE
  Void set_fortran_comment_chars (String_Type table, String_Type list

 DESCRIPTION
  This function may be used to specify the set of characters that
  denote fortran style comments.  The first parameter `table' is
  the name of a previously defined syntax table, and `list'
  denotes the set of characters that specify the fortran-style
  comment.

  The string `list' is simply a set of characters and may include
  character ranges.  If the first character of `list' is
  `'^'', then the meaning is that only those characters that do
  not specify Fortran style comments are included in the list.

 EXAMPLE
  Fortran mode uses the following:

     set_fortran_comment_chars ("FORTRAN", "^0-9 \t\n");

  This means that if any line that begins with any character
  except the characters `0' to `9', the space, tab, and
  newline characters will denote a comment.

 NOTES
  The usefulness of this function is not limited to fortran modes.  In
  fact, many languages have fortran-style comments.

  This function is meaningful only if the syntax table has
  fortran-style comments as specified via the `set_syntax_flags'
  function.

 SEE ALSO
  define_syntax, set_syntax_flags

--------------------------------------------------------------

set_highlight_cache_dir

 SYNOPSIS
  Set the directory for the dfa syntax highlighting cache files

 USAGE
  Void set_highlight_cache_dir (String dir);

 DESCRIPTION
  This function sets the directory where the dfa syntax highlighting
  cache files are located.
  See also: `dfa_enable_highlight_cache'

--------------------------------------------------------------

set_syntax_flags

 SYNOPSIS
  Set the flags in the syntax table "table"

 USAGE
  Void set_syntax_flags (String table, Integer flag);

 DESCRIPTION
  This function may be used to set the flags in the syntax table
  specified by the `table' parameter.  The `flag' parameter may take
  any of the following values or any combination bitwise or-ed together:

      0x01     Keywords are case insensitive
      0x02     Comments are Fortran-like
      0x04     Ignore leading whitespace in C comments
      0x08     Keywords are TeX-like
      0x10     EOL style comments must be surrounded by whitespace.
      0x20     Syntax highlight whole preprocessor line in same color.
      0x40     Leading whitespace allowed for preprocessor lines.
      0x80     Strings do not span lines

  A Fortran-like comment means that any line that begins with certain
  specified characters is considered to be a comment.  This special
  subset of characters must be specified via a call to the
  `set_fortran_comment_chars' function.

  If the `0x04' bit is set, then whitespace at the beginning of a
  line in a C comment preceding a `'*'' character will not be
  highlighted.

  A TeX-like keyword is any word that follows the quote character.

  An EOL style comment is one that ends at the end of the line.

 SEE ALSO
  define_syntax, set_fortran_comment_chars

--------------------------------------------------------------

use_dfa_syntax

 SYNOPSIS
  Turn on/off DFA syntax highlighting for the current mode

 USAGE
  use_syntax_table (Int_Type on_off)

 DESCRIPTION
  This function may be used to turn on or off DFA syntax highlighting
  for the current mode according to whether or not the `on_off'
  parameter is non-zero.  The most useful way of using this function
  is from within a mode hook.

 EXAMPLE
  The following example illustrates how to use this function to enable
  DFA syntax highlighting for C mode:

    define c_mode_hook ()
    {
       use_dfa_syntax (1);
    }


 SEE ALSO
  enable_dfa_syntax_for_mode, disable_dfa_syntax_for_mode

--------------------------------------------------------------

use_syntax_table

 SYNOPSIS
  Associate the current buffer with the syntax table "n"

 USAGE
  Void use_syntax_table (String n);

 DESCRIPTION
  This function associates the current buffer with the syntax table
  specified by the name `n'.  Until another syntax table is associated
  with the buffer, the syntax table named `n' will be used in all
  operations that require a syntax.  This includes parenthesis matching,
  indentation, etc.

 SEE ALSO
  create_syntax_table, define_syntax, what_syntax_table

--------------------------------------------------------------

what_syntax_table

 SYNOPSIS
  Get the name of the active syntax table

 USAGE
  String_Type what_syntax_table ()

 DESCRIPTION
  This function returns of the name of the syntax table used by the
  current buffer.  If no table is in effect it returns NULL.

 SEE ALSO
  define_syntax, use_syntax_table, define_keywords

--------------------------------------------------------------

CHEAP_VIDEO

 SYNOPSIS
  Control flicker on old video cards

 USAGE
  Int_Type CHEAP_VIDEO

 DESCRIPTION
  Some old video cards for MSDOS systems, most notably the CGA card,
  display snow when updating the card.  This variable should be set to
  1 to avoid the presence of snow when used with such a card.

 NOTES
  This variable is not available on all systems.

 SEE ALSO
  SCREEN_WIDTH, SCREEN_HEIGHT

--------------------------------------------------------------

IGNORE_BEEP

 SYNOPSIS
  Control beeping of the terminal

 USAGE
  Int_Type IGNORE_BEEP

 DESCRIPTION
  This variable determines how the terminal is to be beeped.  It may
  be any one of the following values:

   0    Do not beep the terminal in any way.
   1    Produce an audible beep only.
   2    Produce an visible beep only by flashing the display.
   3    Produce both audible and visible bells.


 NOTES
  Not all terminals support visible bells.

 SEE ALSO
  beep

--------------------------------------------------------------

SCREEN_HEIGHT

 SYNOPSIS
  Number of display rows

 USAGE
  Int_Type SCREEN_HEIGHT

 DESCRIPTION
  This is a read-only variable whose value represents the number of
  rows of the display or terminal.

 SEE ALSO
  SCREEN_WIDTH, window_info

--------------------------------------------------------------

SCREEN_WIDTH

 SYNOPSIS
  Number of display columns

 USAGE
  Int_Type SCREEN_WIDTH

 DESCRIPTION
  This is a read-only variable whose value represents the number of
  columns of the display or terminal.

 SEE ALSO
  SCREEN_HEIGHT, window_info

--------------------------------------------------------------

TERM_BLINK_MODE

 SYNOPSIS
  Enable the use of high intensity background colors

 USAGE
  Int_Type TERM_BLINK_MODE

 DESCRIPTION
  If the value of this variable is non-zero, jed will interpret
  high-intensity background colors as blinking characters.  On some
  terminals, e.g., `rxvt', the blink bit will be mapped to an
  actual high intensity background color.

 NOTES
  This variable is not available on all systems.

 SEE ALSO

--------------------------------------------------------------

TERM_CANNOT_INSERT

 SYNOPSIS
  Control the use of terminal insertion

 USAGE
  Int_Type TERM_CANNOT_INSERT

 DESCRIPTION
  The value of this variable indicates whether or not the terminal is
  able to insert.  Do disable the use of the insertion capability, set
  the value of this variable to 0.

 NOTES
  This variable is not available on all systems.  It is a good idea
  not to set this variable.

 SEE ALSO
  TERM_CANNOT_SCROLL

--------------------------------------------------------------

TERM_CANNOT_SCROLL

 SYNOPSIS
  Control the use of the terminal's scrolling capability

 USAGE
  Int_Type TERM_CANNOT_SCROLL

 DESCRIPTION
  If this variable is set to 0, the hardware scrolling capability of
  the terminal will not be used.  This also means that the window will
  be recentered if the cursor moves outside the top or bottom rows of
  the window.

 NOTES
  This variable is not available on all systems.

 SEE ALSO
  TERM_CANNOT_INSERT

--------------------------------------------------------------

USE_ANSI_COLORS

 SYNOPSIS
  Enable the use of colors

 USAGE
  Int_Type USE_ANSI_COLORS

 DESCRIPTION
  The variable `USE_ANSI_COLORS' may be used to enable or disable
  color support.  If set to a non-zero value, the terminal will be
  assumed to support ANSI colors.  This value of this variable is
  initially determined by examining the terminal's terminfo file, or
  by looking for the existence of a `COLORTERM' environment
  variable.

 NOTES
  This variable is not available on all platforms.

 SEE ALSO
  HIGHLIGHT

--------------------------------------------------------------

get_termcap_string

 SYNOPSIS
  Return the keystring associated with the termcap capability "cap"

 USAGE
  String get_termcap_string (String cap);

 DESCRIPTION
  This function may be used to extract the string associated with the
  termcap capability associated with `cap'.
  Note: This function is only available on Unix systems.

--------------------------------------------------------------

set_term_vtxxx

 SYNOPSIS
  Set terminal display appropriate for a vtxxx terminal

 DESCRIPTION
  Set terminal display appropriate for a vtxxx terminal.  This function
  takes a single integer parameter.  If non-zero, the terminal type is set
  for a vt100.  This means the terminal lacks the ability to insert/delete
  lines and characters.  If the parameter is zero, the terminal is assumed
  to be vt102 compatible.  Unless you are using a VERY old terminal or
  a primitive emulator, use zero as the parameter.

--------------------------------------------------------------

get_hostname

 SYNOPSIS
  Get the name of the host computer

 USAGE
  String_Type get_hostname ()

 DESCRIPTION
  The `get_hostname' function returns the name of the host
  computer.  If the editor is unable to determine the name, and the
  user has not specified a name, then `"localhost"' is returned.

 SEE ALSO
  set_hostname, get_realname, get_username

--------------------------------------------------------------

get_realname

 SYNOPSIS
  Get the user's real name

 USAGE
  String_Type get_realname

 DESCRIPTION
 The `get_realname' returns the user's real name.  If the editor
 is unable to determine this value, an empty string is returned.

 SEE ALSO
  set_realname, get_username, get_hostname

--------------------------------------------------------------

get_username

 SYNOPSIS
  Get the username

 USAGE
  String_Type get_username ()

 DESCRIPTION
 The `get_username' function returns the username associated with
 the current process.  If is is unable to determine this value,
 `"unknown"' will be returned.

 SEE ALSO
  set_username, get_realname, get_hostname

--------------------------------------------------------------

set_hostname

 SYNOPSIS
  Set the name of the host

 USAGE
  set_hostname (String_Type hostname)

 DESCRIPTION
 `set_hostname' may be used to set set the name of the host that
 the editor will associate with the current process.

 SEE ALSO
  get_hostname, set_username, set_realname

--------------------------------------------------------------

set_realname

 SYNOPSIS
  Set the user's realname

 USAGE
  set_realname (String_Type realname)

 DESCRIPTION
 The `set_realname' function sets the editor's notion of what the
 user's real name is such that subsequent calls to `get_realname'
 will return the specified value.

 SEE ALSO
  get_realname, get_username, set_username, set_hostname

--------------------------------------------------------------

set_username

 SYNOPSIS
  Set the username of the editor process

 USAGE
  set_username (String_Type username)

 DESCRIPTION
 This function may be used to specify the username associated with the
 editor process.

 SEE ALSO
  get_username, set_realname, set_hostname

--------------------------------------------------------------

BLINK

 SYNOPSIS
  Set whether or not parentheses will be blinked

 USAGE
  Int_Type BLINK

 DESCRIPTION
  The `BLINK' variable controls whether or not matching
  parenthesis are blinked upon the insertion of a closing parenthesis.
  If its value is non-zero, the matching parenthesis will be blinked;
  otherwise, it will not.

--------------------------------------------------------------

DISPLAY_EIGHT_BIT

 SYNOPSIS
  Set the display mode for eight-bit characters

 USAGE
  Int_Type DISPLAY_EIGHT_BIT

 DESCRIPTION
 This variable determines how characters with the high bit set are to
 be displayed.  Specifically, any character whose value is greater than
 or equal to the value of `DISPLAY_EIGHT_BIT' is output to the terminal
 as is.  Characters with the high bit set but less than this value are
 sent to the terminal in a multiple character representation. For Unix
 and VMS systems the value should be set to 160.  This is because many
 terminals use the characters with values between 128 and 160 as eight
 bit control characters.  For other systems, it can be set to zero.

 SEE ALSO
  META_CHAR

--------------------------------------------------------------

DISPLAY_TIME

 SYNOPSIS
  Control the display of the current time

 USAGE
  Int_Type DISPLAY_TIME

 DESCRIPTION
 If this variable is non-zero, the current time will be displayed on the
 status line if the format for the status line permits it.  If it is zero,
 the time will not be displayed even if the `%t' format string is part
 of the status line format.

 SEE ALSO
  set_status_line

--------------------------------------------------------------

VISUAL_WRAP_DEFAULT

 SYNOPSIS
  Controls the visual wrapping for new buffers

 USAGE
  Int_Type DISPLAY_WRAPS_DEFAULT
  The value of this variable controls the visual wrapping attribute
  for newly created buffers.  If the value is non-zero, then
  visual wrapping will be enabled for new buffers.  Otherwise visual
  the visual wrapping attribute will be unset.

  Long lines in buffers with visual wrapping enabled will
  have their lines wrapped at the edge of the window for display
  purposes.  When a line is visually wrapped, the a single backspace
  character will be written to the last column of the window to
  indicate that the line has been visually wrapped.  This wrapping
  indicator may be changed to a different character via the
  `Visual_Wrap_Char' variable.

 SEE ALSO
  set_visual_wrap, toggle_visual_wrap, Visual_Wrap_Char

DOLLAR_CHARACTER

 SYNOPSIS
  The line continuation character

 USAGE
  Int_Type DOLLAR_CHARACTER = '$'

 DESCRIPTION
  The character represented by `DOLLAR_CHARACTER' is used to
  indicate that text extends beyond the borders of the window.  This
  character is traditionally a dollar sign.  If the value of
  `DOLLAR_CHARACTER' is 0, no character will be used for this
  indicator.

 SEE ALSO
  set_color

--------------------------------------------------------------

HIGHLIGHT

 SYNOPSIS
  Turn on/off region highlighting

 USAGE
  Int_Type HIGHLIGHT

 DESCRIPTION
  If this variable is non-zero, marked regions will be highlighted.

 SEE ALSO
  WANT_SYNTAX_HIGHLIGHT, set_color

--------------------------------------------------------------

HORIZONTAL_PAN

 SYNOPSIS
  Set the horizontal panning mode

 USAGE
  Int_Type HORIZONTAL_PAN

 DESCRIPTION
  If the value of this variable is non-zero, the window will pan when
  the cursor goes outside the border of the window.  More precisely,
  if the value is less than zero, the entire window will pan.  If the
  value is positive, only the current line will pan.  The
  absolute value of the number determines the panning increment.

 SEE ALSO
  SCREEN_WIDTH

--------------------------------------------------------------

LINENUMBERS

 SYNOPSIS
  Enable the display of line or column numbers

 USAGE
  Int_Type LINENUMBERS

 DESCRIPTION
  The `LINENUMBERS' variable determines whether or not line or
  column numbers will be displayed on the status line.  If the value
  of `LINENUMBERS' is 0, then neither the line nor column number
  information will be displayed.  If `LINENUMBERS' is set to 1,
  then the current line number will be displayed but column numbers
  will not be.  If `LINENUMBERS' is 2, the both line a column
  numbers will be displayed.

 SEE ALSO
  set_status_line

--------------------------------------------------------------

Simulate_Graphic_Chars

 SYNOPSIS
  Specifies whether or not graphic characters are to be used

 USAGE
  Int_Type Simulate_Graphic_Chars

 DESCRIPTION
  If the value of this variable is non-zero, graphic characters will
  be simulated by simple ascii characters instead of trying to use the
  terminal's alternate character set.

 NOTES
  This variable is not available on all platforms.

--------------------------------------------------------------

Status_Line_String

 SYNOPSIS
  The string used for the status line

 USAGE
  String_Type Status_Line_String

 DESCRIPTION
 `Status_Line_String' is a read-only string variable that
 specifies the format of the status line for newly created buffers.
 To set the status line format, use the function `set_status_line'.

 SEE ALSO
  set_status_line

--------------------------------------------------------------

TAB

 SYNOPSIS
  Set the current buffer TAB width

 USAGE
  Int_Type TAB

 DESCRIPTION
 This variable controls the tab width associated with the current
 buffer.  A value of zero means that tab characters are not expanded
 and that tabs are never used to produce whitespace.

 SEE ALSO
  TAB_DEFAULT, USE_TABS, USE_TABS_DEFAULT

--------------------------------------------------------------

TAB_DEFAULT

 SYNOPSIS
  Set the default tab width

 USAGE
  Int_Type TAB_DEFAULT

 DESCRIPTION
 The value of `TAB_DEFAULT' is the default tab setting given to
 all newly created buffers.  A value of zero means that tab characters
 are not expanded and that tabs are never used to produce whitespace.

 NOTES
 A related variable `TAB' may be used to change the current
 buffer's tab setting.

 SEE ALSO
  TAB, USE_TABS, TAB_DEFAULT, USE_TABS_DEFAULT

--------------------------------------------------------------

TOP_WINDOW_ROW

 SYNOPSIS
  Top window's starting row

 USAGE
  Int_Type

 DESCRIPTION
 This read-only variable gives the value of the starting row of the top
 window.  If a menubar is present, the value will be 2, otherwise it
 will be 1.

 SEE ALSO
  enable_top_status_line, window_info

--------------------------------------------------------------

WANT_EOB

 SYNOPSIS
  Control the display of the end of buffer indicator

 USAGE
  Int_Type

 DESCRIPTION
 If this value of this variable is non-zero, the end of buffer
 indicator `"[EOB]"' will be displayed at the end of the buffer.  Such
 an indicator is used for various editor emulations such as the
 VAX/VMS EDT editor.

--------------------------------------------------------------

WANT_SYNTAX_HIGHLIGHT

 SYNOPSIS
  Enable or disable syntax highlighting

 USAGE
  Int_Type WANT_SYNTAX_HIGHLIGHT

 DESCRIPTION
  If the value of this variable is non-zero, syntax highlighting will
  be enabled.  Otherwise, syntax highlighting will be turned off.

 SEE ALSO
  HIGHLIGHT, set_color

--------------------------------------------------------------

blink_match

 SYNOPSIS
  Blink the matching delimiter

 USAGE
  Void blink_match ();

 DESCRIPTION
  This function will attempt to blink the matching delimiter immediately
  before the editing point.

 SEE ALSO
  find_matching_delimiter, define_syntax

--------------------------------------------------------------

enlargewin

 SYNOPSIS
  Increase the size of the current window

 USAGE
  Void enlargewin ()

 DESCRIPTION
  This function increases the size of the current window by one line by
  adjusting the size of the other windows accordingly.

 SEE ALSO
  window_info, onewindow

--------------------------------------------------------------

nwindows

 SYNOPSIS
  Return the number of windows currently visible

 USAGE
  Integer nwindows ();

 DESCRIPTION
  The `nwindows' function returns the number of windows currently visible.
  If the variable `MINIBUFFER_ACTIVE' is non-zero, the minibuffer is busy and
  contributes to the number of windows.

 SEE ALSO
  splitwindow, onewindow, window_size

 SEE ALSO
  MINIBUFFER_ACTIVE

--------------------------------------------------------------

onewindow

 SYNOPSIS
  Make current window the only one

 USAGE
  Void onewindow ();

 DESCRIPTION
  This function deletes all other windows except the current window and
  the mini-buffer window.

 SEE ALSO
  nwindows, splitwindow, enlargewin

 SEE ALSO
  MINIBUFFER_ACTIVE

--------------------------------------------------------------

otherwindow

 SYNOPSIS
  Make the next window the default window

 USAGE
  Void otherwindow ()

 DESCRIPTION
  This function will make the next window in the ring of windows as the
  default window. For example,

        define zoom_next_window ()
        {
          otherwindow (); onewindow ();
        }

  defines a function that moves to the next window and then makes it the
  only window on the screen.

 SEE ALSO
  nwindows, onewindow

 SEE ALSO
  MINIBUFFER_ACTIVE

--------------------------------------------------------------

recenter

 SYNOPSIS
  Scroll the window to make the "nth" line contain the current line

 USAGE
  Void recenter (Integer nth);

 DESCRIPTION
  This function may be used to scroll the window such that the `nth' line
  of the window contains the current line.  If `nth' is zero, the current
  line will be placed at the center of the window and the screen will be
  completely redrawn.

 SEE ALSO
  nwindows, window_info

--------------------------------------------------------------

set_status_line

 SYNOPSIS
  Customize the status line of the current window

 USAGE
  set_status_line (String format, Integer flag)

 DESCRIPTION
  This function may be used to customize the status line of the current
  window according to the string `format'.  If the second parameter
  `flag' is non-zero, `format' will apply to the global format string;
  otherwise it applies to current buffer only.  Newly created buffer
  inherit the global format string when they appear in a window.
  The format string may contain the following format specifiers:

        %b   buffer name
        %f   file name (without the directory part)
        %F   file name with directory
        %v   JED version
        %t   current time --- only used if variable DISPLAY_TIME is non-zero
        %p   line number or percent string. If LINENUMBERS is 2, this
              expands to "line number,column number"
        %c   column number
        %%   literal '%' character
        %m   mode string
        %a   If abbrev mode, expands to "abbrev"
        %n   If buffer is narrowed, expands to "Narrow"
        %o   If overwrite mode, expands to "Ovwrt"
        %O   Overwrite/Insert flag - like %o, but shows INS/OVR
        %l   Shows current line number
        %L   Shows number of lines in the file
        %C   Use the colour specified by the numeric prefix for the
             remainder of the status line. For instance, %5C selects colour 5.
        %T   Expands to 'tab:' or 'spc:' (depending on whether tabs or spaces are
             being used to indent the current buffer) followed by the indentation
             size
        %W   If wrap mode is enabled, expands to 'wrap:' followed by the wrap size,
             otherwise, expands to 'nowrap'
        %S   The current S-Lang stack depth

  For example, the default status line used by JED's EDT emulation uses
  the format string:

        "(Jed %v) EDT: %b   (%m%a%n%o)  %p,%c   Advance   %t"

  All the format specifiers can include an optional number between the
  '%' and the format character to indicate the width of the field into
  which the value should be formatted, using an optional leading '-'
  character to indicate that the data should be left-justified. For
  example '%5c' will format the current column into a field at least 3
  characters wide.

 SEE ALSO
  set_mode, narrow, whatbuf, getbuf_info

 SEE ALSO
  DISPLAY_TIME,LINENUMBERS, Global_Top_Status_Line, Status_Line_String

--------------------------------------------------------------

set_visual_wrap_indicator (Long_Type wch)

 SYNOPSIS
  Set the character used to denote visual wrapping

 DESCRIPTION
This function may be used to set the character that is used to
indicate that a line has been visually wrapped.  The default character
is a single backslash ('\').  The value of `wch' may be any
single-width unicode character.

 EXAMPLE
  set_visual_wrap_indicator ('\\');   % default
  set_visual_wrap_indicator ('+');    % plus sign
  set_visual_wrap_indicator (0x21b5); % unicode south west arrow

 NOTES
  The font must support the specified character for it to be displayed
  properly.

--------------------------------------------------------------

splitwindow

 SYNOPSIS
  Split the current window vertically

 USAGE
  Void splitwindow ();

 DESCRIPTION
  This function splits the current window vertically creating another
  window that carries the current window's buffer.

 SEE ALSO
  onewindow, enlargewin, window_info

--------------------------------------------------------------

update

 SYNOPSIS
  Update the display

 USAGE
  Void update (Integer f);

 DESCRIPTION
  This function may be called to update the display.  If the parameter
  `f' is non-zero, the display will be updated even if there is input
  pending.  If `f' is zero, the display may only be partially updated if
  input is pending.

 SEE ALSO
  input_pending, flush

--------------------------------------------------------------

update_sans_update_hook

 SYNOPSIS
  Update the display without running the update hooks

 USAGE
  update_sans_update_hook (Int_Type force)

 DESCRIPTION
  The `update_sans_update_hook' function performs the same
  function as `update', except that the buffer's update hook will
  not be run.  See `update' for more information.

 SEE ALSO
  update, set_buffer_hook, unset_buffer_hook

--------------------------------------------------------------

w132

 SYNOPSIS
  Set the number of columns on a vtxxx compatable terminal to 132.

 USAGE
  Void w132 ()

 DESCRIPTION
  This function may be used to set the number of columns on a vtxxx
  compatable terminal to 132.

 SEE ALSO
  w80, set_term_vtxxx

--------------------------------------------------------------

w80

 SYNOPSIS
  Set the number of columns on a vtxxx compatable terminal to 80

 USAGE
  Void w80 ()

 DESCRIPTION
  This function may be used to set the number of columns on a vtxxx
  compatable terminal to 80.

 SEE ALSO
  w132, set_term_vtxxx

--------------------------------------------------------------

window_info

 SYNOPSIS
  Return information concerning the current window

 USAGE
  Integer window_info(Integer item);

 DESCRIPTION
  The `window_info' function returns information concerning the current
  window.  The actual information that is returned depends on the `item'
  parameter.  Acceptable values of `item' and the description of the
  information returned is given in the following table:

        'r'  : Number of rows
        'w'  : Width of window
        'c'  : Starting column (from 1)
        't'  : Screen line of top line of window (from 1)


 SEE ALSO
  otherwindow, nwindows

 SEE ALSO
  SCREEN_HEIGHT,SCREEN_WIDTH

--------------------------------------------------------------

window_line

 SYNOPSIS
  Return the number of rows from the top of the window

 USAGE
  Integer window_line ();

 DESCRIPTION
  This function returns the number of rows from the top of the current
  window for the current line.  If the current line is the very first line
  in the window, a value of `1' will be returned, i.e., it is the first
  line of the window.

 SEE ALSO
  window_info, nwindows

 SEE ALSO
  TOP_WINDOW_ROW

--------------------------------------------------------------

get_scroll_column

 SYNOPSIS
  Get the scroll column for the current window

 USAGE
  Int_Type get_scroll_column ()

 DESCRIPTION
 This function returns the scroll column for the current window.

 SEE ALSO
  set_scroll_column

--------------------------------------------------------------

set_scroll_column

 SYNOPSIS
  Set the scroll column for the current window

 USAGE
  set_scroll_column (Int_Type col)

 DESCRIPTION
 This function may be used to set the scroll column of the current
 window.

 SEE ALSO
  get_scroll_column

--------------------------------------------------------------

x_copy_region_to_cutbuffer

 SYNOPSIS
  Copy the region to the X cutbuffer

 USAGE
  x_copy_region_to_cutbuffer ()

 DESCRIPTION
    places a copy of the region to the X cutbuffer for insertion in other
    X-window programs. In wjed the region is copies to the clipboard.

 SEE ALSO
  x_copy_region_to_selection

--------------------------------------------------------------

x_copy_region_to_selection

 SYNOPSIS
  Copy the region to the X selection

 USAGE
  x_copy_region_to_selection ()

 DESCRIPTION
    places a copy of the region to the X selection for insertion in other
    X-window programs. This function is only available in xjed.

 SEE ALSO
  x_copy_region_to_cutbuffer

--------------------------------------------------------------

x_insert_cutbuffer

 SYNOPSIS
  Insert the content of the X cutbuffer

 USAGE
  Int_Type x_insert_cutbuffer ()

 DESCRIPTION
 Inserts cutbuffer (in wjed the clipboard) into the current buffer and
 returns the number of characters inserted.

 SEE ALSO

--------------------------------------------------------------

x_insert_selection

 SYNOPSIS
  Insert data from the X selection owner

 USAGE
  Int_Type x_insert_selection ()

 DESCRIPTION
 This function only requests selection data from the selection owner.
 If Xjed received EVENT, Xjed inserts selection data into the current buffer
 and returns the number of characters inserted.

 SEE ALSO

--------------------------------------------------------------

x_server_vendor

 SYNOPSIS
  Return the vendor name of the X server

 USAGE
  String_Type x_server_vendor ()

 DESCRIPTION
   This function returns the vendor name of the X server.

 SEE ALSO

--------------------------------------------------------------

x_set_icon_name

 SYNOPSIS
  Set the icon do display in X windows (xjed only)

 USAGE
  x_set_icon_name (String_Type name)

 DESCRIPTION

 SEE ALSO

--------------------------------------------------------------

x_set_keysym

 SYNOPSIS
  Associate a string with a key

 USAGE
  x_set_keysym (Int_Type keysym, Int_Type shift, String_Type str)

 DESCRIPTION
 This function may be used to associate a string `str' with a key
 `keysym' modified by mask `shift'. Pressing the key
 associated with `keysym' will then generate the keysequence
 given by `str'. The function keys are mapped to integers in the
 range `0xFF00' to `0xFFFF'. On most systems, the keys that
 these mappings refer to are located in the file
 `/usr/include/X11/keysymdef.h'. For example, on my system, the
 keysyms for the function keys `XK_F1' to `XK_F35' fall in
 the range `0xFFBE' to `0xFFE0'. So to make the `F1'
 key correspond to the string given by the two characters
 `Ctrl-X' `Ctrl-C', simply use:

    x_set_keysym (0xFFBE, 0, "^X^C");

 The `shift' argument is an integer with the
 following meanings:

    0   : unmodified key
    '$' : shifted
    '^' : control

 Any other value for shift will default to 0 (unshifted).

 SEE ALSO
  x_set_meta_keys

--------------------------------------------------------------

x_set_meta_keys

 SYNOPSIS
  Specify which modifier keys are to be interpreted as meta keys

 USAGE
  x_set_meta_keys (Int_Type mod_mask)

 DESCRIPTION
  The `x_set_meta_keys' function allows the user to specify which
  modifier keys are to be interpreted as meta keys.  The parameter
  `mod_mask' is a bitmapped value whose bits correspond to a
  modifier mask:

      0: Mod1Mask
      1: Mod2Mask
      2: Mod3Mask
      3: Mod4Mask
      4: Mod5Mask


 EXAMPLE

   x_set_meta_keys ((1<<0) | (1<<3));

  specifies that meta keys are to be associated with Mod1Mask and
  Mod4Mask.

 SEE ALSO
  x_set_keysym

--------------------------------------------------------------

x_toggle_visibility

 SYNOPSIS
  Shows or hides the window

 USAGE
  x_toggle_visibility([Integer_Type hide])

 DESCRIPTION
 Makes the xjed display window visible or invisible. If the argument
 `hide' is not given, the visibility of the window is toggled,
 e.g. if the window is invisible it becomes visible and vice versa. If
 the optional argument `hide' is given, the state of the window
 becomes visible if `hide' is non-zero or invisible if
 `hide' is zero, independent of the current state.

 NOTES
 You can also hide the window by calling `suspend', but you can not show
 it, if the window doesn't have the focus.

 SEE ALSO
  suspend

--------------------------------------------------------------

x_set_window_name

 SYNOPSIS
  Set the title of the xjed window

 USAGE
  x_set_window_name (String_Type name)

--------------------------------------------------------------

x_warp_pointer

 SYNOPSIS
  Move the mouse cursor to the current editing position

 USAGE
  x_warp_pointer ()

 DESCRIPTION
  This function may be used to move the mouse cursor to the editing
  position.

--------------------------------------------------------------
